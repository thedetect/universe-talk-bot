# -*- coding: utf-8 -*-
"""
astrology.py ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç—Ä–∞–Ω–∑–∏—Ç–∞–º Skyfield.

–¢–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:
- –¢–µ–º–∞ –¥–Ω—è: –ø–æ —Å–∏–ª—å–Ω–µ–π—à–µ–º—É –∞—Å–ø–µ–∫—Ç—É —Ç—Ä–∞–Ω–∑–∏—Ç–∞ –∫ –Ω–∞—Ç–∞–ª—É
- 3 —Ç–µ–∑–∏—Å–∞: –ø–æ —Ç–æ–ø-3 –∞—Å–ø–µ–∫—Ç–∞–º
- "–î–µ–π—Å—Ç–≤—É–π" (2 –ø—É–Ω–∫—Ç–∞): –ø–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º –∞—Å–ø–µ–∫—Ç–∞–º
- "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏" (2 –ø—É–Ω–∫—Ç–∞): –ø–æ –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–º –∞—Å–ø–µ–∫—Ç–∞–º
- –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª: –ø–æ —Å—Ç–∏—Ö–∏–∏ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–∞—Ç–∞–ª–∞
- –î–µ–≤–∏–∑ –¥–Ω—è: –∏–∑ data/mottos_ru.txt (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ –¥–∞—Ç–µ –∏ user_id)

–ï—Å–ª–∏ —ç—Ñ–µ–º–µ—Ä–∏–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ—Ç —Å–µ—Ç–∏/–∫—ç—à–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º—è–≥–∫–∏–π fallback-—Ç–µ–∫—Å—Ç.
"""

from __future__ import annotations
from dataclasses import dataclass
from datetime import datetime
from typing import List, Dict, Tuple
import os
import math
import hashlib
import pytz

try:
    from skyfield.api import load
except Exception:  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
    load = None  # type: ignore

# ======== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ ========
TZ = os.getenv("TZ", "Europe/Berlin")
TZINFO = pytz.timezone(TZ)

# ======== Skyfield: timescale –∏ —ç—Ñ–µ–º–µ—Ä–∏–¥—ã ========
_ts = None
_eph = None
if load:
    try:
        _ts = load.timescale()
        # de421.bsp —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è –∏ –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Skyfield'–æ–º
        _eph = load("de421.bsp")
    except Exception:
        _ts = None
        _eph = None

# ======== –ê—Å–ø–µ–∫—Ç—ã –∏ –ø–ª–∞–Ω–µ—Ç—ã ========
ASPECTS: List[Tuple[str, float, float]] = [
    ("conj", 0.0, 6.0),    # —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ("sext", 60.0, 4.0),   # —Å–µ–∫—Å—Ç–∏–ª—å
    ("sq", 90.0, 4.0),     # –∫–≤–∞–¥—Ä–∞—Ç
    ("tri", 120.0, 4.0),   # —Ç—Ä–∏–≥–æ–Ω
    ("opp", 180.0, 6.0),   # –æ–ø–ø–æ–∑–∏—Ü–∏—è
]

PLANETS = ["Sun", "Moon", "Mercury", "Venus", "Mars", "Jupiter", "Saturn"]

# ======== –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤ ========
RULES_THEME: Dict[Tuple[str, str], str] = {
    ("Sun", "conj"): "–§–æ–∫—É—Å –Ω–∞ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –∏ —è—Å–Ω–æ—Å—Ç–∏. –í–∞–∂–Ω–æ –∑–∞—è–≤–∏—Ç—å –æ —Å–µ–±–µ.",
    ("Moon", "conj"): "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ ‚Äî –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ.",
    ("Mercury", "conj"): "–î–µ–Ω—å –¥–ª—è —Å–ª–æ–≤, –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–µ–π –∏ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
    ("Venus", "conj"): "–¢–µ–ø–ª–æ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ —ç—Å—Ç–µ—Ç–∏–∫–µ. –£–∫—Ä–∞—Å—å —Å–≤–æ–π –¥–µ–Ω—å.",
    ("Mars", "conj"): "–≠–Ω–µ—Ä–≥–∏—è –∏ –Ω–∞–ø–æ—Ä, –¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥.",
    ("Jupiter", "conj"): "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤: —É—á—ë–±–∞, –ø–ª–∞–Ω—ã, —â–µ–¥—Ä–æ—Å—Ç—å.",
    ("Saturn", "conj"): "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞. –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ —Å–≤–æ–±–æ–¥–µ.",
    # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–¥ –¥—Ä—É–≥–∏–µ –∞—Å–ø–µ–∫—Ç—ã
}

RULES_DO: Dict[str, List[str]] = {
    "Mercury_pos": ["–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–∞–∂–Ω–æ–µ –ø–∏—Å—å–º–æ/—Å–æ–æ–±—â–µ–Ω–∏–µ", "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–∑–≤–æ–Ω"],
    "Venus_pos":   ["–°–¥–µ–ª–∞–π –∫–æ–º—É-—Ç–æ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç", "–î–æ–±–∞–≤—å –∫—Ä–∞—Å–æ—Ç—ã –≤ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"],
    "Mars_pos":    ["–°–¥–µ–ª–∞–π –æ–¥–∏–Ω —Å–º–µ–ª—ã–π —à–∞–≥ –∫ —Ü–µ–ª–∏", "–†–∞–∑–≥—Ä–µ–±–∏ —Ç–æ, —á—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª(–∞)"],
    "Jupiter_pos": ["–ü–æ—Ç—Ä–∞—Ç—å 20 –º–∏–Ω—É—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ", "–†–∞—Å—à–∏—Ä—å –ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü"],
    "Saturn_pos":  ["–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞–º–∫–∏ –∏ —Å—Ä–æ–∫–∏ –¥–µ–ª–∞", "–£–±–µ—Ä–∏ –ª–∏—à–Ω–µ–µ –∏–∑ –ø–ª–∞–Ω–æ–≤"],
    "Moon_pos":    ["10 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã –¥–ª—è —Å–µ–±—è", "–ó–∞–ø–∏—à–∏ 3 —á—É–≤—Å—Ç–≤–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"],
}

RULES_DONT: Dict[str, List[str]] = {
    "Mercury_neg": ["–ù–µ –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏—è ¬´–Ω–∞ —ç–º–æ—Ü–∏—è—Ö¬ª", "–ò–∑–±–µ–≥–∞–π –∏–Ω—Ñ–æ—à—É–º–∞"],
    "Venus_neg":   ["–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏", "–ù–µ –ø–æ–∫—É–ø–∞–π –∏–º–ø—É–ª—å—Å–∏–≤–Ω–æ ¬´–ª–∏—à—å –±—ã¬ª"],
    "Mars_neg":    ["–ù–µ —Å–∂–∏–≥–∞–π –º–æ—Å—Ç—ã –≤ —Å–ø–µ—à–∫–µ", "–ù–µ —Å–ø–æ—Ä—å —Ä–∞–¥–∏ —Å–ø–æ—Ä–∞"],
    "Jupiter_neg": ["–ù–µ —Ä–∞–∑–±—Ä–∞—Å—ã–≤–∞–π—Å—è –æ–±–µ—â–∞–Ω–∏—è–º–∏", "–ù–µ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥—É–π —Ä–µ—Å—É—Ä—Å"],
    "Saturn_neg":  ["–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –≤–∞–∂–Ω–æ–µ ¬´–Ω–∞ –ø–æ—Ç–æ–º¬ª", "–ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π –≥—Ä–∞—Ñ–∏–∫"],
    "Moon_neg":    ["–ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —É—Å—Ç–∞–ª–æ—Å—Ç—å", "–ù–µ –∑–∞–µ–¥–∞–π —á—É–≤—Å—Ç–≤–∞ ‚Äî –∏—Ö –ª—É—á—à–µ –ø—Ä–æ–∂–∏—Ç—å"],
}

RITUALS_BY_ELEMENT: Dict[str, str] = {
    "fire":  "5 –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è/–¥–≤–∏–∂–µ–Ω–∏—è ‚Äî —Ä–∞–∑–æ–≥—Ä–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ—Ç–æ—Ä.",
    "earth": "–¢—ë–ø–ª—ã–π —á–∞–π –∏ —á–µ–∫-–ª–∏—Å—Ç –∏–∑ —Ç—Ä—ë—Ö –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–ª ‚Äî –∑–∞–∑–µ–º–ª–∏—Å—å.",
    "air":   "3 –º–∏–Ω—É—Ç—ã –¥—ã—Ö–∞–Ω–∏—è 4‚Äì7‚Äì8 ‚Äî –æ—Å–≤–µ–∂–∏ –≥–æ–ª–æ–≤—É.",
    "water": "–°–ø–æ–∫–æ–π–Ω–∞—è –º—É–∑—ã–∫–∞ –∏ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã ‚Äî –¥–∞–π —á—É–≤—Å—Ç–≤–∞–º –º—è–≥–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
}

# ======== –ú–æ–¥–µ–ª—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ========
@dataclass
class UserData:
    user_id: int
    name: str
    birth_datetime_iso: str  # "YYYY-MM-DD HH:MM" (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, TZ –∏–∑ env)
    daily_time: str          # "HH:MM"

# ======== –£—Ç–∏–ª–∏—Ç—ã ========
def _safe_ts():
    if _ts is None:
        raise RuntimeError("Skyfield timescale not initialized")
    return _ts

def _safe_eph():
    if _eph is None:
        raise RuntimeError("Skyfield ephemeris not available")
    return _eph

def _ecl_long(planet: str, t) -> float:
    """–≠–∫–ª. –¥–æ–ª–≥–æ—Ç–∞ –ø–ª–∞–Ω–µ—Ç—ã –≤ –≥—Ä–∞–¥—É—Å–∞—Ö [0..360)."""
    eph = _safe_eph()
    e = eph[planet].at(t).ecliptic_position().longitude.degrees % 360.0
    return float(e)

def _ang_diff(a: float, b: float) -> float:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≥–ª–æ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ 0..180."""
    return abs((a - b + 180.0) % 360.0 - 180.0)

def _find_aspects(natal: Dict[str, float], trans: Dict[str, float]) -> List[Tuple[str, str, str, float]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Å–ø–µ–∫—Ç–æ–≤ (tr_planet, nat_planet, aspect_code, weight)
    weight ‚Äî –ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: —Å–∫–æ—Ä–æ—Å—Ç—å –ø–ª–∞–Ω–µ—Ç—ã + —Ç–æ—á–Ω–æ—Å—Ç—å –∞—Å–ø–µ–∫—Ç–∞
    """
    hits: List[Tuple[str, str, str, float]] = []
    speed_rank = {"Moon": 6, "Mercury": 5, "Venus": 5, "Sun": 4, "Mars": 4, "Jupiter": 3, "Saturn": 2}
    for p_tr, lon_tr in trans.items():
        for p_nat, lon_nat in natal.items():
            d = _ang_diff(lon_tr, lon_nat)
            for code, exact, orb in ASPECTS:
                # —Å—á–∏—Ç–∞–µ–º –∞—Å–ø–µ–∫—Ç "–ø–æ–π–º–∞–Ω–Ω—ã–º", –µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ –æ—Ä–±–∏—Å –≤–æ–∫—Ä—É–≥ —Ç–æ—á–Ω–æ–≥–æ —É–≥–ª–∞
                if abs(d - exact) <= orb:
                    tight = max(0.0, (orb - abs(d - exact)) / orb)  # 0..1
                    w = speed_rank.get(p_tr, 1) + tight
                    hits.append((p_tr, p_nat, code, w))
                    break
    hits.sort(key=lambda x: x[3], reverse=True)
    return hits

def _sun_element(lon: float) -> str:
    """–°—Ç–∏—Ö–∏—è –°–æ–ª–Ω—Ü–∞ –ø–æ –∑–Ω–∞–∫—É: –æ–≥–æ–Ω—å/–∑–µ–º–ª—è/–≤–æ–∑–¥—É—Ö/–≤–æ–¥–∞."""
    idx = int((lon % 360.0) // 30)  # 0..11
    # 0 –û–≤–µ–Ω,1 –¢–µ–ª–µ—Ü,2 –ë–ª–∏–∑–Ω–µ—Ü—ã,3 –†–∞–∫,4 –õ–µ–≤,5 –î–µ–≤–∞,6 –í–µ—Å—ã,7 –°–∫–æ—Ä–ø–∏–æ–Ω,8 –°—Ç—Ä–µ–ª–µ—Ü,9 –ö–æ–∑–µ—Ä–æ–≥,10 –í–æ–¥–æ–ª–µ–π,11 –†—ã–±—ã
    if idx in (0, 4, 8):
        return "fire"
    if idx in (1, 5, 9):
        return "earth"
    if idx in (2, 6, 10):
        return "air"
    return "water"

def _motto_for(dt_local: datetime, user_id: int) -> str:
    """
    –î–µ—Ç. –≤—ã–±–æ—Ä –¥–µ–≤–∏–∑–∞ –ø–æ –¥–∞—Ç–µ (–ª–æ–∫–∞–ª—å–Ω–æ–π) –∏ user_id.
    –ë–µ—Ä—ë–º data/mottos_ru.txt (–ø–æ –æ–¥–Ω–æ–π —Ü–∏—Ç–∞—Ç–µ –≤ —Å—Ç—Ä–æ–∫—É), –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî fallback.
    """
    path = os.path.join(os.path.dirname(__file__), "..", "data", "mottos_ru.txt")
    quotes: List[str] = []
    try:
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                quotes = [ln.strip() for ln in f if ln.strip()]
    except Exception:
        quotes = []
    if not quotes:
        quotes = [
            "–õ—é–±–æ–≤—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ.",
            "–¢–∞–º, –≥–¥–µ –≤–Ω–∏–º–∞–Ω–∏–µ ‚Äî —Ç–∞–º —ç–Ω–µ—Ä–≥–∏—è.",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–∞—ë—Ç —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            "–Ø –≤—ã–±–∏—Ä–∞—é –¥–≤–∏–≥–∞—Ç—å—Å—è —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
        ]
    h = int(hashlib.sha1(f"{dt_local.date()}:{user_id}".encode("utf-8")).hexdigest(), 16)
    return quotes[h % len(quotes)]

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ========
def generate_daily_message(u: UserData) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ï—Å–ª–∏ Skyfield –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –º—è–≥–∫–∏–π fallback
    if _ts is None or _eph is None:
        name = u.name or "–¥—Ä—É–≥"
        motto = _motto_for(datetime.now(TZINFO), u.user_id)
        fallback = [
            f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!",
            "üîÆ –¢–µ–º–∞ –¥–Ω—è: ¬´–ë–µ—Ä–µ–∂–Ω–æ—Å—Ç—å –∏ —è—Å–Ω–æ—Å—Ç—å¬ª",
            "",
            "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.",
            "‚Ä¢ –î–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∞—Å–æ—Ç—ã –∏ –ø–æ—Ä—è–¥–∫–∞ –≤ –¥–µ–ª–∞.",
            "‚Ä¢ –°–¥–µ–ª–∞–π –æ–¥–∏–Ω –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Ü–µ–ª–∏.",
            "",
            "‚úÖ –î–µ–π—Å—Ç–≤—É–π:",
            "‚Ä¢ –ó–∞–≤–µ—Ä—à–∏ —Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª(–∞).",
            "‚Ä¢ –ó–∞–ø–∏—à–∏ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —à–∞–≥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
            "",
            "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏:",
            "‚Ä¢ –ù–µ —Ç–æ—Ä–æ–ø–∏ —Å–æ–±—ã—Ç–∏—è ‚Äî –≤—Å—ë –ø—Ä–∏–¥—ë—Ç –≤–æ–≤—Ä–µ–º—è.",
            "‚Ä¢ –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏.",
            "",
            "üïØ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (5 –º–∏–Ω—É—Ç):",
            "–¢—ë–ø–ª—ã–π –Ω–∞–ø–∏—Ç–æ–∫, —Ç—Ä–∏ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å –º—ã—Å–ª–µ–π.",
            "",
            f"üîë –î–µ–≤–∏–∑ –¥–Ω—è: ¬´{motto}¬ª",
        ]
        return "\n".join(fallback)

    # 1) –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è: —Å—Ç—Ä–æ–∫–∞ "YYYY-MM-DD HH:MM" –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º TZ
    try:
        born_local = datetime.strptime(u.birth_datetime_iso.strip(), "%Y-%m-%d %H:%M")
    except Exception:
        born_local = datetime(2000, 1, 1, 12, 0)
    born_aware = TZINFO.localize(born_local)
    born_utc = born_aware.astimezone(pytz.utc)

    t_nat = _ts.from_datetime(born_utc)

    # 2) –ù–∞—Ç–∞–ª: —ç–∫–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–≥–æ—Ç—ã –ø–ª–∞–Ω–µ—Ç
    natal: Dict[str, float] = {}
    for p in PLANETS:
        try:
            natal[p] = _ecl_long(p, t_nat)
        except Exception:
            natal[p] = 0.0

    # 3) –¢—Ä–∞–Ω–∑–∏—Ç—ã: –±–µ—Ä—ë–º –ø–æ–ª–¥–µ–Ω—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è, —á—Ç–æ–±—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ
    now_local = datetime.now(TZINFO)
    trans_local_noon = now_local.replace(hour=12, minute=0, second=0, microsecond=0)
    trans_utc = trans_local_noon.astimezone(pytz.utc)
    t_tr = _ts.from_datetime(trans_utc)

    trans: Dict[str, float] = {}
    for p in PLANETS:
        try:
            trans[p] = _ecl_long(p, t_tr)
        except Exception:
            trans[p] = 0.0

    # 4) –ê—Å–ø–µ–∫—Ç—ã –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
    aspects = _find_aspects(natal, trans)  # [(tr, nat, code, weight), ...]
    top = aspects[:6]

    # 5) –¢–µ–º–∞ –¥–Ω—è
    theme = "–î–µ–Ω—å –¥–ª—è –±–µ—Ä–µ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–Ω–∏–º–∞–Ω–∏—è –∫ —Å–µ–±–µ."
    if top:
        tr, natp, code, _ = top[0]
        theme = RULES_THEME.get((tr, code), theme)

    # 6) –¢–µ–∑–∏—Å—ã (–¥–æ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö)
    theses: List[str] = []
    for tr, natp, code, _ in top[:3]:
        if tr == "Moon":
            theses.append("–°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.")
        elif tr == "Mars" and code in ("conj", "tri", "sext"):
            theses.append("–ú–∞—Ä—Å –¥–∞—ë—Ç —Ç–µ–±–µ —Å–∏–ª—É –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ—Ç¬ª –ª–∏—à–Ω–µ–º—É.")
        elif tr == "Venus":
            theses.append("–î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ –∏ –±–ª–∏–∑–∫–∏—Ö.")
        elif tr == "Mercury":
            theses.append("–ú—ã—Å–ª–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —è—Å–Ω–µ–µ ‚Äî –ø—Ä–æ–≥–æ–≤–æ—Ä–∏ –≤–∞–∂–Ω–æ–µ.")
        elif tr == "Jupiter":
            theses.append("–ò–¥–µ–∏ –ø—Ä–æ—Ä–∞—Å—Ç–∞—é—Ç ‚Äî —Å–º–µ–ª–æ —Ä–∞—Å—à–∏—Ä—è–π –≥–æ—Ä–∏–∑–æ–Ω—Ç.")
        elif tr == "Saturn":
            theses.append("–ü–æ—Ä—è–¥–æ–∫ –∏ —Ä–∞–º–∫–∏ —Å–µ–≥–æ–¥–Ω—è ‚Äî —Ç–≤–æ–∏ —Å–æ—é–∑–Ω–∏–∫–∏.")
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–º
    seen = set()
    theses = [t for t in theses if not (t in seen or seen.add(t))][:3]

    # 7) –î–µ–π—Å—Ç–≤—É–π/–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏
    do_list: List[str] = []
    dont_list: List[str] = []
    for tr, natp, code, _ in top:
        positive = code in ("conj", "tri", "sext")
        key = f"{tr}_{'pos' if positive else 'neg'}"
        if positive:
            do_list.extend(RULES_DO.get(key, []))
        else:
            dont_list.extend(RULES_DONT.get(key, []))
        if len(do_list) >= 4 and len(dont_list) >= 4:
            break
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 2
    def uniq2(items: List[str]) -> List[str]:
        s, out = set(), []
        for it in items:
            if it not in s:
                s.add(it); out.append(it)
            if len(out) >= 2:
                break
        return out

    do_final = uniq2(do_list) or ["–°–¥–µ–ª–∞–π –æ–¥–∏–Ω –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ –º–µ—á—Ç–µ.", "–ó–∞–≤–µ—Ä—à–∏ —Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª(–∞)."]
    dont_final = uniq2(dont_list) or ["–ù–µ —Ç–æ—Ä–æ–ø–∏ —Å–æ–±—ã—Ç–∏—è ‚Äî –≤—Å—ë –ø—Ä–∏–¥—ë—Ç –≤–æ–≤—Ä–µ–º—è.", "–ò–∑–±–µ–≥–∞–π —Å–∞–º–æ–µ–¥—Å—Ç–≤–∞ –∏ –ª–∏—à–Ω–µ–π –∫—Ä–∏—Ç–∏–∫–∏."]

    # 8) –†–∏—Ç—É–∞–ª –ø–æ —Å—Ç–∏—Ö–∏–∏ –°–æ–ª–Ω—Ü–∞ –Ω–∞—Ç–∞–ª–∞
    sun_element = _sun_element(natal.get("Sun", 0.0))
    ritual = RITUALS_BY_ELEMENT.get(sun_element, RITUALS_BY_ELEMENT["earth"])

    # 9) –î–µ–≤–∏–∑ –¥–Ω—è
    motto = _motto_for(now_local, u.user_id)

    # 10) –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    name = u.name or "–¥—Ä—É–≥"
    parts: List[str] = []
    parts.append(f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!")
    parts.append(f"\nüîÆ –¢–µ–º–∞ –¥–Ω—è: ¬´{theme}¬ª")
    if theses:
        parts.append("")
        parts.extend(f"‚Ä¢ {t}" for t in theses)
    parts.append("")
    parts.append("‚úÖ –î–µ–π—Å—Ç–≤—É–π:")
    parts.extend(f"‚Ä¢ {x}" for x in do_final)
    parts.append("")
    parts.append("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏:")
    parts.extend(f"‚Ä¢ {x}" for x in dont_final)
    parts.append("")
    parts.append("üïØ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (5 –º–∏–Ω—É—Ç):")
    parts.append(ritual)
    parts.append("")
    parts.append(f"üîë –î–µ–≤–∏–∑ –¥–Ω—è: ¬´{motto}¬ª")

    return "\n".join(parts)