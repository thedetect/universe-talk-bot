# -*- coding: utf-8 -*-
"""
–ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –ë–û–¢–ê.
–ó–∞–ø—É—Å–∫:  python -m telegram_bot.bot

–¢—Ä–µ–±—É–µ—Ç ENV:
  BOT_TOKEN
  PUBLIC_URL = https://universe-talk-bot.onrender.com
  WEBHOOK_SECRET
  PORT = 10000
  USE_WEBHOOK = 1
  TZ = Europe/Berlin
  DB_PATH = /data/user_data_v2.db
  ADMIN_IDS = 12345,67890
  REFERRAL_BONUS_DAYS = 0 (–∏–ª–∏ —á–∏—Å–ª–æ)
  PYTHONUNBUFFERED = 1
"""

import os
import re
import json
import sqlite3
import logging
from datetime import datetime, time as dtime, timedelta, timezone
from typing import Optional, Dict, Any

import pytz
from apscheduler.triggers.cron import CronTrigger
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, ParseMode,
    InputFile,
)
from telegram.ext import (
    Updater, CallbackContext, CommandHandler, MessageHandler, Filters,
    ConversationHandler,
)

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–≤–æ–µ–≥–æ –º–æ–¥—É–ª—è:
try:
    from .astrology import generate_daily_message  # type: ignore
except Exception:
    # –∑–∞–ø–∞—Å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–æ–¥—É–ª—è
    def generate_daily_message(user_row: Dict[str, Any]) -> str:
        name = user_row.get("name") or "–¥—Ä—É–≥"
        return (
            f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!\n\n"
            "–°–µ–≥–æ–¥–Ω—è ‚Äî —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ –≤–∞–∂–Ω–æ–π —Ü–µ–ª–∏. "
            "–û–¥–∏–Ω –∑–≤–æ–Ω–æ–∫, –æ–¥–Ω–æ –ø–∏—Å—å–º–æ, –æ–¥–Ω–∞ –º—ã—Å–ª—å ‚Äî –∏ –≤—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç —Ç–µ–±—è. üåü\n\n"
            "–í–æ–ø—Ä–æ—Å –¥–Ω—è: –∫–∞–∫–æ–π —à–∞–≥ –ø–æ–¥–∞—Ä–∏—Ç –º–Ω–µ –æ—â—É—â–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
        )

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò/ENV --------------------

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "1") in ("1", "true", "True", "yes", "YES")
PORT = int(os.getenv("PORT", "10000"))
DB_PATH = os.getenv("DB_PATH", "/data/user_data_v2.db")
SERVER_TZ = os.getenv("TZ", "Europe/Berlin")

ADMIN_IDS = {int(x) for x in re.split(r"[,\s]+", os.getenv("ADMIN_IDS", "").strip()) if x}
REFERRAL_BONUS_DAYS = int(os.getenv("REFERRAL_BONUS_DAYS", "0"))

# -------------------- –õ–û–ì–ò --------------------

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s | %(message)s"
)
log = logging.getLogger("bot")

# -------------------- DB --------------------

def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db() -> None:
    conn = db()
    cur = conn.cursor()
    cur.executescript(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id        INTEGER PRIMARY KEY,
            chat_id        INTEGER,
            name           TEXT,
            birth_date     TEXT,
            birth_place    TEXT,
            birth_time     TEXT,
            tz             TEXT DEFAULT 'Europe/Berlin',
            send_time      TEXT DEFAULT '09:00', -- HH:MM –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            is_blocked     INTEGER DEFAULT 0,

            is_subscribed  INTEGER DEFAULT 0,
            sub_until      TEXT,               -- ISO timestamp –≤ UTC
            bonus_days     INTEGER DEFAULT 0,

            referrer_id    INTEGER,
            ref_bonus_given INTEGER DEFAULT 0,

            created_at     TEXT
        );

        CREATE INDEX IF NOT EXISTS idx_users_sendtime ON users(send_time);
        """
    )
    conn.commit()
    conn.close()

def row_to_dict(row: sqlite3.Row) -> Dict[str, Any]:
    return dict(row) if row else {}

def get_user(user_id: int) -> Dict[str, Any]:
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    r = cur.fetchone()
    conn.close()
    return row_to_dict(r)

def upsert_user(user_id: int, chat_id: Optional[int] = None) -> None:
    conn = db()
    cur = conn.cursor()
    now_iso = datetime.now(timezone.utc).isoformat()
    cur.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    if cur.fetchone():
        if chat_id:
            cur.execute("UPDATE users SET chat_id=? WHERE user_id=?", (chat_id, user_id))
    else:
        cur.execute(
            "INSERT INTO users(user_id, chat_id, created_at) VALUES(?,?,?)",
            (user_id, chat_id, now_iso),
        )
    conn.commit()
    conn.close()

def update_user(user_id: int, **fields: Any) -> None:
    if not fields:
        return
    keys = ", ".join([f"{k}=?" for k in fields.keys()])
    values = list(fields.values()) + [user_id]
    conn = db()
    cur = conn.cursor()
    cur.execute(f"UPDATE users SET {keys} WHERE user_id=?", values)
    conn.commit()
    conn.close()

def all_users() -> list:
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE is_blocked=0")
    rows = [row_to_dict(r) for r in cur.fetchall()]
    conn.close()
    return rows

# -------------------- –£–¢–ò–õ–ò–¢–´ --------------------

def _parse_iso(dt: str):
    try:
        return datetime.fromisoformat(dt.replace("Z", "+00:00"))
    except Exception:
        return None

def can_receive_today(u: Dict[str, Any]) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–ø—É—Å–∫–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ:
      - –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∏–ª–∏
      - bonus_days > 0, –∏–ª–∏
      - —Ç—Ä–∏–∞–ª 10 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏–ª–∏
      - sub_until –≤ –±—É–¥—É—â–µ–º.
    –ù–ò–ö–û–ì–î–ê –Ω–µ –∫–∏–¥–∞–µ—Ç KeyError, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç.
    """
    if not u or u.get("is_blocked"):
        return False

    is_sub = bool(u.get("is_subscribed"))
    if is_sub:
        return True

    bonus_days = int(u.get("bonus_days") or 0)
    if bonus_days > 0:
        return True

    now = datetime.now(timezone.utc)
    sub_until = u.get("sub_until")
    if sub_until:
        dt = _parse_iso(sub_until)
        if dt and dt > now:
            return True

    created_at = _parse_iso(u.get("created_at") or "")
    if created_at and (now - created_at).days < 10:
        return True

    return False

def parse_time_hhmm(s: str) -> Optional[dtime]:
    m = re.match(r"^([01]?\d|2[0-3]):([0-5]\d)$", s.strip())
    if not m:
        return None
    return dtime(int(m.group(1)), int(m.group(2)))

def user_tz(u: Dict[str, Any]) -> pytz.BaseTzInfo:
    tz_name = u.get("tz") or "Europe/Berlin"
    try:
        return pytz.timezone(tz_name)
    except Exception:
        return pytz.timezone("Europe/Berlin")

def send_main_menu(update: Update, context: CallbackContext, text: str = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:") -> None:
    uid = update.effective_user.id
    is_admin = uid in ADMIN_IDS
    kb = [
        ["üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", "üó∫ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"],
        ["üìù –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "üì£ –†–µ—Ñ–µ—Ä–∞–ª—ã"],
        ["üîî –°—Ç–∞—Ç—É—Å", "‚ùå –û—Ç–º–µ–Ω–∞"],
    ]
    if is_admin:
        kb.append(["üëë –ê–¥–º–∏–Ω–∫–∞"])
    update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

# -------------------- –†–ê–°–°–´–õ–ö–ê --------------------

def build_daily_text(user_row: Dict[str, Any]) -> str:
    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è/skyfield)
    msg = generate_daily_message(user_row)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ¬´–¥–µ–≤–∏–∑ –¥–Ω—è¬ª –∏–∑ –±–∞–∑—ã/—Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return msg

def job_name(uid: int) -> str:
    return f"user-{uid}"

def schedule_user_job(context: CallbackContext, u: Dict[str, Any]) -> None:
    """–°–æ–∑–¥–∞—ë–º/–ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –¥–∂–æ–±—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ TZ –∏ –≤—Ä–µ–º–µ–Ω–∏."""
    uid = u["user_id"]
    st = u.get("send_time") or "09:00"
    t = parse_time_hhmm(st) or dtime(9, 0)
    tz = user_tz(u)

    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é
    for j in context.job_queue.get_jobs_by_name(job_name(uid)):
        j.remove()

    trigger = CronTrigger(hour=t.hour, minute=t.minute, second=0, timezone=tz)
    context.job_queue.run_job(
        func=send_daily_job,
        name=job_name(uid),
        job_kwargs={"trigger": trigger},
        context={"user_id": uid},
    )
    log.info("Scheduled user %s at %s (%s)", uid, st, tz)

def reschedule_all(context: CallbackContext) -> None:
    users = all_users()
    for u in users:
        if u.get("send_time"):
            schedule_user_job(context, u)

def send_daily_job(context: CallbackContext) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è APScheduler-–æ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    try:
        uid = context.job.context["user_id"]
        u = get_user(uid)
        if not u:
            return
        if not can_receive_today(u):
            return
        chat_id = u.get("chat_id")
        if not chat_id:
            return
        text = build_daily_text(u)
        context.bot.send_message(chat_id=chat_id, text=text)
        # –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥—É–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ ‚Äî —É–º–µ–Ω—å—à–∞–µ–º
        if not u.get("is_subscribed"):
            bd = int(u.get("bonus_days") or 0)
            if bd > 0:
                update_user(uid, bonus_days=bd - 1)
    except Exception:
        log.exception("send_daily_job error")

# -------------------- –†–ï–§–ï–†–ê–õ–´ --------------------

def handle_deeplink_ref(update: Update) -> Optional[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç referrer_id, –µ—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º."""
    args = update.message.text.strip().split(maxsplit=1)
    if len(args) == 2 and args[0].lower().startswith("/start"):
        ref = args[1].strip()
        if ref.isdigit():
            return int(ref)
    return None

def accrue_ref_bonus(new_user_id: int, referrer_id: int) -> None:
    """–ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ —ç—Ç–æ –ù–ï —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª –∏ –µ—â—ë –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª–∏."""
    if referrer_id == new_user_id:
        return
    r = get_user(referrer_id)
    if not r:
        return
    if int(r.get("is_blocked") or 0):
        return
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–¥–∞–≤–∞–ª–∏ –∏–ª–∏ –Ω–µ—Ç
    u_new = get_user(new_user_id)
    if int(u_new.get("ref_bonus_given") or 0):
        return
    bonus = REFERRAL_BONUS_DAYS
    if bonus > 0:
        new_bonus = int(r.get("bonus_days") or 0) + bonus
        update_user(referrer_id, bonus_days=new_bonus)
    update_user(new_user_id, ref_bonus_given=1, referrer_id=referrer_id)

# -------------------- –î–ò–ê–õ–û–ì–ò --------------------

ASK_NAME, ASK_BDATE, ASK_BPLACE, ASK_BTIME = range(4)

def start(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    upsert_user(user.id, update.effective_chat.id)

    # deeplink
    ref = handle_deeplink_ref(update)
    if ref:
        # —Ñ–∏–∫—Å: –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ—é –∂–µ —Å—Å—ã–ª–∫—É
        accrue_ref_bonus(user.id, ref)

    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–±–æ—Ç.\n"
        "–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç 1‚Äì2 –º–∏–Ω—É—Ç—ã.\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ASK_NAME

def ask_name(update: Update, context: CallbackContext) -> int:
    name = update.message.text.strip()
    update_user(update.effective_user.id, name=name)
    update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)?")
    return ASK_BDATE

def ask_bdate(update: Update, context: CallbackContext) -> int:
    s = update.message.text.strip()
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", s):
        update.message.reply_text("–§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ASK_BDATE
    update_user(update.effective_user.id, birth_date=s)
    update.message.reply_text("–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞)?")
    return ASK_BPLACE

def ask_bplace(update: Update, context: CallbackContext) -> int:
    s = update.message.text.strip()
    update_user(update.effective_user.id, birth_place=s)
    update.message.reply_text("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 18:25)?")
    return ASK_BTIME

def ask_btime(update: Update, context: CallbackContext) -> int:
    s = update.message.text.strip()
    if not re.match(r"^([01]?\d|2[0-3]):([0-5]\d)$", s):
        update.message.reply_text("–§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ASK_BTIME
    update_user(update.effective_user.id, birth_time=s)
    send_main_menu(update, context, "–ì–æ—Ç–æ–≤–æ! –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n")
    return ConversationHandler.END

def menu(update: Update, context: CallbackContext) -> None:
    send_main_menu(update, context)

def handle_menu_buttons(update: Update, context: CallbackContext) -> None:
    t = (update.message.text or "").strip()
    uid = update.effective_user.id

    if t == "üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è":
        update.message.reply_text("–£–∫–∞–∂–∏ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ß–ß:–ú–ú):",
                                  reply_markup=ReplyKeyboardRemove())
        context.user_data["waiting"] = "send_time"
        return

    if t == "üó∫ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
        update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Asia/Yekaterinburg):",
                                  reply_markup=ReplyKeyboardRemove())
        context.user_data["waiting"] = "tz"
        return

    if t == "üìù –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
        return start(update, context)

    if t == "üì£ –†–µ—Ñ–µ—Ä–∞–ª—ã":
        me = get_user(uid)
        link = f"https://t.me/{context.bot.username}?start={uid}"
        invited = []  # –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ; —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –∏ –±–∞–ª–∞–Ω—Å
        reply = (
            f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
            f"–ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏: {int(me.get('bonus_days') or 0)}\n"
            f"–ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π ‚Äî –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏."
        )
        update.message.reply_text(reply)
        return send_main_menu(update, context)

    if t == "üîî –°—Ç–∞—Ç—É—Å":
        me = get_user(uid)
        is_sub = "–¥–∞" if int(me.get("is_subscribed") or 0) else "–Ω–µ—Ç"
        sub_until = me.get("sub_until") or "‚Äî"
        bonus = int(me.get("bonus_days") or 0)
        trial_info = ""
        cr = _parse_iso(me.get("created_at") or "")
        if cr:
            days = (datetime.now(timezone.utc) - cr).days
            if days < 10:
                trial_info = f"\n–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: –æ—Å—Ç–∞–ª–æ—Å—å {max(0, 9 - days)} –¥–Ω."
        update.message.reply_text(
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {is_sub}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {sub_until}\n–ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏: {bonus}{trial_info}"
        )
        return send_main_menu(update, context)

    if t == "‚ùå –û—Ç–º–µ–Ω–∞":
        return send_main_menu(update, context, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")

    if t == "üëë –ê–¥–º–∏–Ω–∫–∞" and uid in ADMIN_IDS:
        kb = [
            ["üì§ Broadcast", "üîß –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å"],
            ["üö´ –ë–ª–æ–∫", "‚úÖ –†–∞–∑–±–ª–æ–∫"],
            ["‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
        ]
        update.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
        context.user_data["admin"] = True
        return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ admin-–º–µ–Ω—é
    if context.user_data.get("admin"):
        if t == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            context.user_data["admin"] = False
            return send_main_menu(update, context)

        if t == "üì§ Broadcast":
            update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                                      reply_markup=ReplyKeyboardRemove())
            context.user_data["admin_wait"] = "broadcast"
            return
        if t == "üîß –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å":
            update.message.reply_text("–§–æ—Ä–º–∞—Ç: user_id –ø—Ä–æ–±–µ–ª –¥–Ω–∏. –ü—Ä–∏–º–µ—Ä: 123456 5",
                                      reply_markup=ReplyKeyboardRemove())
            context.user_data["admin_wait"] = "bonus"
            return
        if t == "üö´ –ë–ª–æ–∫":
            update.message.reply_text("–£–∫–∞–∂–∏ user_id –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
                                      reply_markup=ReplyKeyboardRemove())
            context.user_data["admin_wait"] = "block"
            return
        if t == "‚úÖ –†–∞–∑–±–ª–æ–∫":
            update.message.reply_text("–£–∫–∞–∂–∏ user_id –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
                                      reply_markup=ReplyKeyboardRemove())
            context.user_data["admin_wait"] = "unblock"
            return
        if t == "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
            update.message.reply_text("–£–∫–∞–∂–∏ user_id:",
                                      reply_markup=ReplyKeyboardRemove())
            context.user_data["admin_wait"] = "info"
            return

    # –µ—Å–ª–∏ –∂–¥—ë–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–≤–æ–¥
    waiting = context.user_data.pop("waiting", None)
    if waiting == "send_time":
        tm = parse_time_hhmm(t)
        if not tm:
            update.message.reply_text("–§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            context.user_data["waiting"] = "send_time"
            return
        update_user(uid, send_time=f"{tm.hour:02d}:{tm.minute:02d}")
        schedule_user_job(context, get_user(uid))
        send_main_menu(update, context, f"–°–æ—Ö—Ä–∞–Ω–∏–ª –≤—Ä–µ–º—è {tm.hour:02d}:{tm.minute:02d}.")
        return

    if waiting == "tz":
        try:
            _ = pytz.timezone(t)
        except Exception:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π TZ. –ü—Ä–∏–º–µ—Ä—ã: Europe/Berlin, Asia/Yekaterinburg")
            context.user_data["waiting"] = "tz"
            return
        update_user(uid, tz=t)
        schedule_user_job(context, get_user(uid))
        send_main_menu(update, context, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {t}")
        return

    # –æ–∂–∏–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≤–≤–æ–¥–æ–≤
    aw = context.user_data.pop("admin_wait", None)
    if aw and uid in ADMIN_IDS:
        if aw == "broadcast":
            text = update.message.text
            cnt = 0
            for u in all_users():
                try:
                    if u.get("chat_id") and not u.get("is_blocked"):
                        context.bot.send_message(chat_id=u["chat_id"], text=text)
                        cnt += 1
                except Exception:
                    pass
            update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {cnt} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            return send_main_menu(update, context)
        if aw == "bonus":
            m = re.match(r"^\s*(\d+)\s+(\-?\d+)\s*$", update.message.text or "")
            if not m:
                update.message.reply_text("–ù—É–∂–Ω–æ: user_id –∏ –¥–Ω–∏ (—á–∏—Å–ª–æ).")
                context.user_data["admin_wait"] = "bonus"
                return
            uid2 = int(m.group(1))
            days = int(m.group(2))
            u2 = get_user(uid2)
            if not u2:
                update.message.reply_text("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return send_main_menu(update, context)
            new_b = int(u2.get("bonus_days") or 0) + days
            update_user(uid2, bonus_days=max(0, new_b))
            update.message.reply_text("–ì–æ—Ç–æ–≤–æ.")
            return send_main_menu(update, context)
        if aw == "block":
            uid2 = int(update.message.text.strip())
            update_user(uid2, is_blocked=1)
            update.message.reply_text("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return send_main_menu(update, context)
        if aw == "unblock":
            uid2 = int(update.message.text.strip())
            update_user(uid2, is_blocked=0)
            update.message.reply_text("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            return send_main_menu(update, context)
        if aw == "info":
            uid2 = int(update.message.text.strip())
            u2 = get_user(uid2)
            if not u2:
                update.message.reply_text("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            else:
                update.message.reply_text("```\n" + json.dumps(u2, ensure_ascii=False, indent=2) + "\n```",
                                          parse_mode=ParseMode.MARKDOWN)
            return send_main_menu(update, context)

# -------------------- –ö–û–ú–ê–ù–î–´ --------------------

def cmd_menu(update: Update, context: CallbackContext):
    return send_main_menu(update, context)

def cmd_stop(update: Update, context: CallbackContext):
    update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# -------------------- MAIN --------------------

def main() -> None:
    init_db()

    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –î–∏–∞–ª–æ–≥ –∞–Ω–∫–µ—Ç—ã
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME:   [MessageHandler(Filters.text & ~Filters.command, ask_name)],
            ASK_BDATE:  [MessageHandler(Filters.text & ~Filters.command, ask_bdate)],
            ASK_BPLACE: [MessageHandler(Filters.text & ~Filters.command, ask_bplace)],
            ASK_BTIME:  [MessageHandler(Filters.text & ~Filters.command, ask_btime)],
        },
        fallbacks=[CommandHandler("stop", cmd_stop)],
        allow_reentry=True,
    )
    dp.add_handler(conv)

    # –ú–µ–Ω—é
    dp.add_handler(CommandHandler("menu", cmd_menu))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_menu_buttons))

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –¥–∂–æ–±—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    updater.job_queue.run_once(lambda c: reschedule_all(c), 1)

    # ---------- –°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ webhook c –∞–≤—Ç–æ-—Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ polling ----------
    webhook_url = f"{PUBLIC_URL}/{WEBHOOK_SECRET}" if (USE_WEBHOOK and PUBLIC_URL and WEBHOOK_SECRET) else None
    try:
        if webhook_url:
            updater.start_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=WEBHOOK_SECRET,
                webhook_url=webhook_url,
            )
            log.info("Webhook started at %s", webhook_url)
        else:
            updater.start_polling()
            log.info("Polling started")
    except Exception:
        log.exception("Webhook failed, fallback to polling()")
        updater.start_polling()

    updater.idle()


if __name__ == "__main__":
    main()
