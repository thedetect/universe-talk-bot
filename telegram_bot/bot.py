# telegram_bot/bot.py
# -*- coding: utf-8 -*-

import logging
import os
import re
from datetime import datetime
from typing import Optional

import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import ParseMode, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext
)

from telegram_bot import database
from telegram_bot.astrology import generate_daily_message, UserData

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s", level=logging.INFO
)
log = logging.getLogger("bot")

# ---------- –û–ö–†–£–ñ–ï–ù–ò–ï ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")
PORT = int(os.getenv("PORT", "10000"))

REFERRAL_BONUS_DAYS = int(os.getenv("REFERRAL_BONUS_DAYS", "10"))
PROJECT_TZ = os.getenv("TZ", "Europe/Berlin")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x}

TIME_RE = re.compile(r"^([01]?\d|2[0-3]):([0-5]\d)$")

scheduler = BackgroundScheduler(timezone=pytz.timezone(PROJECT_TZ))

# ---------- –ú–ï–ù–Æ ----------
def main_menu(is_admin: bool) -> ReplyKeyboardMarkup:
    rows = [
        ["üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"],
        ["üßæ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å"],
        ["‚è∞ –ú–æ–π –∑–∞–ø—É—Å–∫ (/mytime)"],
    ]
    if is_admin:
        rows.append(["‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞"])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

UPDATE_MENU = ReplyKeyboardMarkup(
    [
        ["–ò–º—è", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["‚¨ÖÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

ADMIN_MENU = ReplyKeyboardMarkup(
    [
        ["üì£ –†–∞—Å—Å—ã–ª–∫–∞", "‚ûï –ë–æ–Ω—É—Å—ã"],
        ["üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "üëÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚¨ÖÔ∏è –í –º–µ–Ω—é"],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)


def reply_menu(update: Update, text: str) -> None:
    uid = update.effective_user.id
    update.effective_message.reply_text(text, reply_markup=main_menu(uid in ADMIN_IDS))


# ---------- –î–û–°–¢–£–ü–ù–û–°–¢–¨ –†–ê–°–°–´–õ–ö–ò ----------
def _parse_date(d: Optional[str]):
    if not d:
        return None
    for fmt in ("%Y-%m-%d", "%Y-%m-%d %H:%M:%S", "%Y-%m-%dT%H:%M:%S"):
        try:
            return datetime.strptime(d, fmt).date()
        except Exception:
            pass
    return None


def can_receive_today(u: dict):
    status = (u.get("subscription_status") or "").lower()
    trial_until_raw = u.get("trial_until") or u.get("sub_until") or u.get("subscription_until")
    bonus_days = int(u.get("bonus_days") or 0)

    tzname = u.get("tz") or PROJECT_TZ
    tz = pytz.timezone(tzname)
    today = datetime.now(tz).date()

    if status == "active":
        return True, "active"

    trial_until = _parse_date(trial_until_raw)
    if trial_until and today <= trial_until:
        return True, "trial"

    if bonus_days > 0:
        return True, "bonus"

    return False, "expired"


# ---------- –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ----------
def schedule_job(user_id: int, daily_time: str, tzname: Optional[str]):
    tz = pytz.timezone(tzname or PROJECT_TZ)
    job_id = f"user-{user_id}"

    # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é
    for j in scheduler.get_jobs():
        if j.id == job_id:
            j.remove()

    hh, mm = map(int, daily_time.split(":"))
    scheduler.add_job(
        send_daily_job, "cron",
        id=job_id, replace_existing=True,
        hour=hh, minute=mm, second=0, timezone=tz,
        args=[user_id]
    )
    log.info("Scheduled %s at %02d:%02d (%s)", job_id, hh, mm, tz.zone)


def send_daily_job(user_id: int):
    try:
        u = database.get_user(user_id)
        if not u or int(u.get("is_blocked") or 0) == 1:
            return

        ok, reason = can_receive_today(u)
        if not ok:
            log.info("Skip user %s: reason=%s", user_id, reason)
            return

        tzname = u.get("tz") or PROJECT_TZ
        userdata = UserData(
            name=u.get("first_name") or "",
            birth_date=u.get("birth_date") or "",
            birth_place=u.get("birth_place") or "",
            birth_time=u.get("birth_time") or "",
            tz=tzname,
        )
        text = generate_daily_message(userdata)

        chat_id = int(u["chat_id"])
        updater.bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

        if reason == "bonus":
            cur = int(u.get("bonus_days") or 0)
            if cur > 0:
                database.update_user_field(user_id, "bonus_days", cur - 1)
    except Exception:
        log.exception("send_daily_job failed for %s", user_id)


# ---------- –ö–û–ú–ê–ù–î–´/–•–ï–ù–î–õ–ï–†–´ ----------
def start(update: Update, context: CallbackContext):
    database.init_db()
    m = update.effective_message
    tgu = update.effective_user
    chat = update.effective_chat

    # —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    database.upsert_user(
        tgu.id, chat.id, tgu.first_name or "", tz=PROJECT_TZ, username=tgu.username or ""
    )

    # deep-link referral: /start <code>
    if context.args:
        code = context.args[0]
        credited, referrer = database.handle_referral(tgu.id, code, REFERRAL_BONUS_DAYS)
        if credited:
            m.reply_text("–°–ø–∞—Å–∏–±–æ! –ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤–∞—à–µ–º—É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É üåü")
        elif referrer == tgu.id:
            m.reply_text("–≠—Ç–æ –≤–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî –±–æ–Ω—É—Å—ã —Å–µ–±–µ –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è üôÇ")
        # –µ—Å–ª–∏ –∫–æ–¥ –ª–µ–≤—ã–π ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    # –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    reply_menu(update, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.")

    # –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å
    u = database.get_user(tgu.id)
    if u and u.get("daily_time"):
        schedule_job(tgu.id, u["daily_time"], u.get("tz"))


def menu(update: Update, context: CallbackContext):
    reply_menu(update, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")


def mytime(update: Update, context: CallbackContext):
    u = database.get_user(update.effective_user.id)
    tzname = u.get("tz") or PROJECT_TZ
    tz = pytz.timezone(tzname)
    daily = u.get("daily_time") or "–Ω–µ –∑–∞–¥–∞–Ω–æ"
    job_id = f"user-{u['user_id']}"
    jobs = [j for j in scheduler.get_jobs() if j.id == job_id]
    if jobs and jobs[0].next_run_time:
        nxt = jobs[0].next_run_time.astimezone(tz).strftime("%d.%m %H:%M %Z")
        update.effective_message.reply_text(f"‚è∞ –í—Ä–µ–º—è: {daily} ({tzname})\n‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {nxt}",
                                            reply_markup=main_menu(update.effective_user.id in ADMIN_IDS))
    else:
        reply_menu(update, f"‚è∞ –í—Ä–µ–º—è: {daily} ({tzname}). –ó–∞–¥–∞—á–∞ –µ—â—ë –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.")


def settime(update: Update, context: CallbackContext):
    update.effective_message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä. 08:30).",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data["await_time"] = True


def settz(update: Update, context: CallbackContext):
    update.effective_message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å IANA-—Ç–∞–π–º–∑–æ–Ω—É, –Ω–∞–ø—Ä.: Europe/Berlin, Asia/Yekaterinburg.",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data["await_tz"] = True


def text_router(update: Update, context: CallbackContext):
    text = (update.effective_message.text or "").strip()
    uid = update.effective_user.id

    # –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    if context.user_data.pop("await_time", False):
        if not TIME_RE.match(text):
            reply_menu(update, "–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú, –Ω–∞–ø—Ä. 09:15.")
            return
        database.update_user_field(uid, "daily_time", text)
        u = database.get_user(uid)
        schedule_job(uid, text, u.get("tz"))
        reply_menu(update, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
        return

    # –æ–∂–∏–¥–∞–Ω–∏–µ TZ
    if context.user_data.pop("await_tz", False):
        try:
            pytz.timezone(text)  # –ø—Ä–æ–≤–µ—Ä–∫–∞
        except Exception:
            reply_menu(update, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: Asia/Yekaterinburg")
            return
        database.update_user_field(uid, "tz", text)
        u = database.get_user(uid)
        if u.get("daily_time"):
            schedule_job(uid, u["daily_time"], text)
        reply_menu(update, "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ")
        return

    # –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if text == "üßæ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        update.effective_message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=UPDATE_MENU)
        context.user_data["await_update"] = True
        return

    if context.user_data.get("await_update"):
        if text == "‚¨ÖÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å":
            context.user_data["await_update"] = False
            reply_menu(update, "–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ.")
            return
        elif text == "–ò–º—è":
            update.effective_message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.", reply_markup=ReplyKeyboardRemove())
            context.user_data["await_name"] = True
            return
        elif text == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è":
            update.effective_message.reply_text("–î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=ReplyKeyboardRemove())
            context.user_data["await_birth_date"] = True
            return
        elif text == "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è":
            update.effective_message.reply_text("–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞", reply_markup=ReplyKeyboardRemove())
            context.user_data["await_birth_place"] = True
            return
        elif text == "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è":
            update.effective_message.reply_text("–ß–ß:–ú–ú", reply_markup=ReplyKeyboardRemove())
            context.user_data["await_birth_time"] = True
            return

    # –ø–æ–ª—è
    if context.user_data.pop("await_name", False):
        database.update_user_field(uid, "first_name", text)
        reply_menu(update, "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        return
    if context.user_data.pop("await_birth_date", False):
        database.update_user_field(uid, "birth_date", text)
        reply_menu(update, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")
        return
    if context.user_data.pop("await_birth_place", False):
        database.update_user_field(uid, "birth_place", text)
        reply_menu(update, "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        return
    if context.user_data.pop("await_birth_time", False):
        if not TIME_RE.match(text):
            reply_menu(update, "–§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –Ω–∞–ø—Ä. 07:30.")
            return
        database.update_user_field(uid, "birth_time", text)
        reply_menu(update, "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        return

    # –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è":
        return settime(update, context)
    if text == "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
        return settz(update, context)
    if text == "‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å":
        u = database.get_user(uid)
        ok, reason = can_receive_today(u)
        reply_menu(update, f"–°—Ç–∞—Ç—É—Å: {reason} (ok={ok})")
        return
    if text == "‚è∞ –ú–æ–π –∑–∞–ø—É—Å–∫ (/mytime)":
        return mytime(update, context)

    # –∞–¥–º–∏–Ω–∫–∞
    if text == "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞" and uid in ADMIN_IDS:
        update.effective_message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=ADMIN_MENU)
        return

    if uid in ADMIN_IDS:
        if text == "‚¨ÖÔ∏è –í –º–µ–Ω—é":
            reply_menu(update, "–û–∫")
            return
        if text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞":
            update.effective_message.reply_text("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω —É–π–¥—ë—Ç –≤—Å–µ–º (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º).",
                                                reply_markup=ReplyKeyboardRemove())
            context.user_data["await_broadcast"] = True
            return
        if text == "‚ûï –ë–æ–Ω—É—Å—ã":
            update.effective_message.reply_text("–§–æ—Ä–º–∞—Ç: <telegram_id> <–¥–Ω–µ–π> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 5)",
                                                reply_markup=ReplyKeyboardRemove())
            context.user_data["await_bonus"] = True
            return
        if text == "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞":
            update.effective_message.reply_text("–ö–æ–º–∞–Ω–¥—ã: /ban <id> –∏–ª–∏ /unban <id>", reply_markup=ADMIN_MENU)
            return
        if text == "üëÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            s = database.stats()
            update.effective_message.reply_text(
                f"–í—Å–µ–≥–æ: {s['total']}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {s['active']}\n–û–ø–ª–∞—Ç–∏–≤—à–∏—Ö: {s['paid']}\n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {s['refs']}",
                reply_markup=ADMIN_MENU,
            )
            return

    if context.user_data.pop("await_broadcast", False) and uid in ADMIN_IDS:
        count = 0
        for chat_id in database.all_active_chats():
            try:
                updater.bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
                count += 1
            except Exception:
                continue
        reply_menu(update, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
        return

    if context.user_data.pop("await_bonus", False) and uid in ADMIN_IDS:
        try:
            tg_id_s, days_s = text.split()
            database.add_bonus_days(int(tg_id_s), int(days_s))
            reply_menu(update, "–ì–æ—Ç–æ–≤–æ ‚úÖ")
        except Exception:
            reply_menu(update, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 5")
        return

    # –ø—Ä–æ –±–∞–Ω/—Ä–∞–∑–±–∞–Ω
    if uid in ADMIN_IDS and text.startswith("/ban"):
        try:
            ban_id = int(text.split()[1])
            database.set_block(ban_id, True)
            reply_menu(update, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ban_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ")
        except Exception:
            reply_menu(update, "–§–æ—Ä–º–∞—Ç: /ban 123456")
        return
    if uid in ADMIN_IDS and text.startswith("/unban"):
        try:
            ban_id = int(text.split()[1])
            database.set_block(ban_id, False)
            reply_menu(update, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ban_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ")
        except Exception:
            reply_menu(update, "–§–æ—Ä–º–∞—Ç: /unban 123456")
        return

    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    reply_menu(update, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")


def error_handler(update: object, context: CallbackContext) -> None:
    log.exception("Unhandled error", exc_info=context.error)


def main():
    database.init_db()

    global updater
    updater = Updater(BOT_TOKEN, use_context=True)

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start, pass_args=True))
    dp.add_handler(CommandHandler("menu", menu))
    dp.add_handler(CommandHandler("settime", settime))
    dp.add_handler(CommandHandler("settz", settz))
    dp.add_handler(CommandHandler("mytime", mytime))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_router))
    dp.add_error_handler(error_handler)

    if not scheduler.running:
        scheduler.start()

    # webhook –Ω–∞ Render (–ø–æ—Ä—Ç 10000 –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
    updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=WEBHOOK_SECRET)
    if PUBLIC_URL:
        updater.bot.set_webhook(f"{PUBLIC_URL}/{WEBHOOK_SECRET}")
        log.info("Webhook started: %s/%s", PUBLIC_URL, WEBHOOK_SECRET)
    else:
        log.warning("PUBLIC_URL is empty, falling back to polling")
        updater.start_polling()

    log.info("Service is live")
    updater.idle()


if __name__ == "__main__":
    main()