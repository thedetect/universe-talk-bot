# -*- coding: utf-8 -*-
"""
bot.py ‚Äî Telegram-–±–æ—Ç (PTB 13.15) —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
- Webhook —Å—Ç–∞—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–ø–µ—Ä–µ–¥–∞—ë–º webhook_url, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ set_webhook)
- Fallback SQLite –ë–î, –µ—Å–ª–∏ –Ω–µ—Ç –≤–∞—à–µ–≥–æ database.py
- –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 10 –¥–Ω–µ–π, –ø–æ–¥–ø–∏—Å–∫–∞ sub_until, –±–æ–Ω—É—Å-–¥–Ω–∏ bonus_days
- –ü–æ—Å–ª–µ –ª—é–±–æ–π –ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
"""

import os
import logging
import sqlite3
from contextlib import closing
from datetime import datetime, date, time as dtime

import pytz
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)

# ==== –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π ====
try:
    # –≤–∞—à config.py (–µ—Å–ª–∏ –µ—Å—Ç—å)
    from .config import (
        TELEGRAM_BOT_TOKEN as CFG_TOKEN,
        PUBLIC_URL as CFG_PUBLIC_URL,
        WEBHOOK_SECRET as CFG_WEBHOOK_SECRET,
        USE_WEBHOOK as CFG_USE_WEBHOOK,
        ADMIN_IDS as CFG_ADMIN_IDS,
        DB_PATH as CFG_DB_PATH,
    )
except Exception:
    CFG_TOKEN = CFG_PUBLIC_URL = CFG_WEBHOOK_SECRET = None
    CFG_USE_WEBHOOK = None
    CFG_ADMIN_IDS = []
    CFG_DB_PATH = None

# –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ telegram_bot/astrology.py)
from .astrology import generate_daily_message, UserData  # noqa: E402

# ============================ –õ–û–ì–ò ============================
logging.basicConfig(
    format="%(asctime)s %(levelname)s | %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ============================ –ö–û–ù–§–ò–ì ============================
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", CFG_TOKEN or "").strip()
USE_WEBHOOK = str(os.getenv("USE_WEBHOOK", CFG_USE_WEBHOOK if CFG_USE_WEBHOOK is not None else "1")).strip()
PUBLIC_URL = os.getenv("PUBLIC_URL", CFG_PUBLIC_URL or "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", CFG_WEBHOOK_SECRET or "").strip()
DB_PATH = os.getenv("DB_PATH", CFG_DB_PATH or "/opt/render/project/src/user_data.db").strip()
TZ = os.getenv("TZ", "Europe/Berlin")
TZINFO = pytz.timezone(TZ)

ADMIN_IDS = set()
for raw in (os.getenv("ADMIN_IDS", "") or ",").split(","):
    raw = raw.strip()
    if raw.isdigit():
        ADMIN_IDS.add(int(raw))
for v in (CFG_ADMIN_IDS or []):
    try:
        ADMIN_IDS.add(int(v))
    except Exception:
        pass

TRIAL_DAYS = 10

def truthy(v) -> bool:
    return str(v).strip().lower() in {"1", "true", "yes", "y", "on"}

# ============================ –ë–î (fallback, –µ—Å–ª–∏ –Ω–µ—Ç –≤–∞—à–µ–≥–æ database.py) ============================
try:
    from . import database as db  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
except Exception:
    db = None

def _fallback_init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.execute("""
        CREATE TABLE IF NOT EXISTS users(
            user_id      INTEGER PRIMARY KEY,
            chat_id      INTEGER,
            name         TEXT,
            birth_date   TEXT,      -- "YYYY-MM-DD"
            birth_time   TEXT,      -- "HH:MM"
            birth_place  TEXT,
            daily_time   TEXT,      -- "HH:MM"
            trial_start  TEXT,      -- "YYYY-MM-DD"
            sub_until    TEXT,      -- "YYYY-MM-DD"
            bonus_days   INTEGER DEFAULT 0,
            referred_by  INTEGER,
            created_at   TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """)
        con.commit()

def _fallback_get_user(uid: int):
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.row_factory = sqlite3.Row
        cur = con.execute("SELECT * FROM users WHERE user_id=?", (uid,))
        return cur.fetchone()

def _fallback_upsert_user(uid: int, chat_id: int):
    today = date.today().isoformat()
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.execute("""
            INSERT INTO users(user_id, chat_id, trial_start)
            VALUES(?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET chat_id=excluded.chat_id
        """, (uid, chat_id, today))
        con.commit()

def _fallback_update_field(uid: int, field: str, value: str):
    allowed = {"name","birth_date","birth_time","birth_place","daily_time","sub_until","bonus_days","referred_by"}
    if field not in allowed:
        return
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.execute(f"UPDATE users SET {field}=? WHERE user_id=?", (value, uid))
        con.commit()

def _fallback_all_users():
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.row_factory = sqlite3.Row
        cur = con.execute("SELECT * FROM users WHERE chat_id IS NOT NULL")
        return cur.fetchall()

def _fallback_all_chat_ids():
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        cur = con.execute("SELECT chat_id FROM users WHERE chat_id IS NOT NULL")
        return [r[0] for r in cur.fetchall()]

def init_db():
    try:
        if db:
            db.init_db()
        else:
            _fallback_init_db()
        log.info("DB ready at %s", DB_PATH)
    except Exception as e:
        log.exception("DB init failed: %s", e)
        _fallback_init_db()

def ensure_user(uid: int, chat_id: int):
    try:
        if db:
            u = db.get_user(uid)
            if not u:
                db.create_or_update_user(uid, chat_id=chat_id)
            else:
                db.create_or_update_user(uid, chat_id=chat_id)
        else:
            _fallback_upsert_user(uid, chat_id)
    except Exception:
        _fallback_upsert_user(uid, chat_id)

def update_field(uid: int, field: str, value: str):
    try:
        if db:
            db.update_user_field(uid, field, value)
        else:
            _fallback_update_field(uid, field, value)
    except Exception:
        _fallback_update_field(uid, field, value)

def get_user(uid: int):
    try:
        if db:
            return db.get_user(uid)
        return _fallback_get_user(uid)
    except Exception:
        return _fallback_get_user(uid)

def all_users():
    try:
        if db:
            return db.get_all_users()
        return _fallback_all_users()
    except Exception:
        return _fallback_all_users()

def all_chat_ids():
    try:
        if db:
            return db.get_all_chat_ids()
        return _fallback_all_chat_ids()
    except Exception:
        return _fallback_all_chat_ids()

# ============================ –ö–õ–ê–í–ò–ê–¢–£–†–´ ============================
MAIN_KB = ReplyKeyboardMarkup(
    [
        ["‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏"],
        ["üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"],
        ["‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"],
    ],
    resize_keyboard=True,
)

UPDATE_KB = ReplyKeyboardMarkup(
    [
        ["–ò–º—è", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å"],
    ],
    resize_keyboard=True,
)

# ============================ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ============================
def parse_hhmm(s: str):
    try:
        hh, mm = s.split(":")
        return int(hh), int(mm)
    except Exception:
        return None

def to_utc_time(hh: int, mm: int) -> dtime:
    """–ü–µ—Ä–µ–≤–æ–¥ –ª–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ TZ) –≤ UTC-–≤—Ä–µ–º—è –¥–ª—è JobQueue.run_daily()."""
    local = TZINFO.localize(datetime.now().replace(hour=hh, minute=mm, second=0, microsecond=0))
    utc = local.astimezone(pytz.utc)
    return dtime(hour=utc.hour, minute=utc.minute, second=0)

def can_receive_today(u_row) -> (bool, str):
    """–†–µ—à–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ: (ok, why_not/cta_text)."""
    today = date.today()
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
    trial_start = (u_row["trial_start"] if isinstance(u_row, dict) else getattr(u_row, "trial_start", None)) or None
    sub_until  = (u_row["sub_until"]  if isinstance(u_row, dict) else getattr(u_row, "sub_until", None)) or None
    bonus_days = (u_row["bonus_days"] if isinstance(u_row, dict) else getattr(u_row, "bonus_days", 0)) or 0

    # –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞?
    if sub_until:
        try:
            if date.fromisoformat(sub_until) >= today:
                return True, ""
        except Exception:
            pass

    # –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 10 –¥–Ω–µ–π
    if trial_start:
        try:
            d0 = date.fromisoformat(trial_start)
            if (today - d0).days < TRIAL_DAYS:
                return True, ""
        except Exception:
            pass

    # –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏
    if bonus_days and int(bonus_days) > 0:
        # —É–º–µ–Ω—å—à–∏–º –Ω–∞ 1 ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º
        new_val = int(bonus_days) - 1
        update_field(u_row["user_id"], "bonus_days", str(new_val))
        return True, ""

    # –∏–Ω–∞—á–µ ‚Äî –Ω–µ–ª—å–∑—è
    cta = (
        "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –±–æ–Ω—É—Å-–¥–Ω–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å: /subscribe /referrals"
    )
    return False, cta

def schedule_for_user(job_queue, u_row):
    """–°—Ç–∞–≤–∏—Ç/–ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    uid = u_row["user_id"] if isinstance(u_row, dict) else u_row[0]
    chat_id = u_row["chat_id"] if isinstance(u_row, dict) else u_row[1]
    daily_time = (u_row["daily_time"] if isinstance(u_row, dict) else None) or "09:00"
    parsed = parse_hhmm(daily_time) or (9, 0)
    when_utc = to_utc_time(*parsed)
    name = f"user-{uid}"
    # —É–±—Ä–∞—Ç—å –ø—Ä–µ–∂–Ω–∏–µ
    for j in job_queue.get_jobs_by_name(name):
        j.schedule_removal()
    # –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
    job_queue.run_daily(callback=send_daily_job, time=when_utc, context={"user_id": uid, "chat_id": chat_id}, name=name)
    log.info("Scheduled %s at %s (UTC)", name, when_utc.strftime("%H:%M"))

# ============================ –•–ï–ù–î–õ–ï–†–´ ============================
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    ensure_user(user.id, update.effective_chat.id)

    # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ ?start=<code>
    if update.message and update.message.text and " " in update.message.text:
        try:
            _, code = update.message.text.split(" ", 1)
            code = code.strip()
            if code.isdigit():
                # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                u = get_user(user.id)
                ref_now = u["referred_by"] if u else None
                if not ref_now:
                    update_field(user.id, "referred_by", code)
                    # –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É (10 –¥–Ω–µ–π)
                    try:
                        inviter = int(code)
                        inviter_row = get_user(inviter)
                        if inviter_row:
                            current = int(inviter_row["bonus_days"] or 0)
                            update_field(inviter, "bonus_days", str(current + 10))
                    except Exception:
                        pass
        except Exception:
            pass

    txt = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! üåü\n\n"
        "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ñ–º–∏ /menu, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, "
        "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
    )
    update.message.reply_text(txt, reply_markup=MAIN_KB)

def menu(update: Update, context: CallbackContext):
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_KB)

def close_menu(update: Update, context: CallbackContext):
    update.message.reply_text("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=ReplyKeyboardRemove())

def status(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    u = get_user(uid)
    dt = u["daily_time"] if u and u["daily_time"] else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
    sub = u["sub_until"] if u and u["sub_until"] else "–Ω–µ—Ç"
    trial = u["trial_start"] if u and u["trial_start"] else "‚Äî"
    bonus = int(u["bonus_days"] or 0) if u else 0
    txt = (
        f"–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {dt}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub}\n"
        f"–ü—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç: {trial} (+{TRIAL_DAYS} –¥–Ω–µ–π)\n"
        f"–ë–æ–Ω—É—Å-–¥–Ω–µ–π: {bonus}"
    )
    update.message.reply_text(txt)

def referrals(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    bot_username = context.bot.username or "bot"
    link = f"https://t.me/{bot_username}?start={uid}"
    u = get_user(uid)
    bonus = int(u["bonus_days"] or 0) if u else 0
    text = (
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"–ë–æ–Ω—É—Å-–¥–Ω–µ–π –Ω–∞ —Å—á–µ—Ç—É: {bonus}\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ ‚Äî +10 –¥–Ω–µ–π."
    )
    update.message.reply_text(text, disable_web_page_preview=True)

def subscribe(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü–ª–∞—Ç—ë–∂–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –ø–æ–∑–∂–µ. –ü–æ–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –±–æ–Ω—É—Å-–¥–Ω—è–º–∏ –∏–∑ /referrals.\n"
        "–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–ø–æ–º–Ω–∏ /subscribe.",
    )

def settime(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):", reply_markup=ReplyKeyboardRemove()
    )
    context.user_data["await_time"] = True

def update_cmd(update: Update, context: CallbackContext):
    update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=UPDATE_KB)

def text_router(update: Update, context: CallbackContext):
    text = (update.message.text or "").strip()

    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if context.user_data.pop("await_time", False):
        parsed = parse_hhmm(text)
        if not parsed:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 08:30. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /settime.")
            return
        update_field(update.effective_user.id, "daily_time", f"{parsed[0]:02d}:{parsed[1]:02d}")
        # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
        u = get_user(update.effective_user.id)
        schedule_for_user(context.job_queue, u)
        update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        return menu(update, context)

    # –≤—ã–±–æ—Ä –ø–æ–ª—è
    if text in {"–ò–º—è", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è"}:
        context.user_data["update_field"] = text
        update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        context.user_data["await_value"] = True
        return

    if text == "–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å":
        update.message.reply_text("–û–∫, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        return menu(update, context)

    # –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è
    if context.user_data.pop("await_value", False):
        fld_map = {
            "–ò–º—è": "name",
            "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": "birth_date",    # –æ–∂–∏–¥–∞–µ–º YYYY-MM-DD
            "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è": "birth_place",
            "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è": "birth_time",   # –æ–∂–∏–¥–∞–µ–º HH:MM
        }
        fld = fld_map.get(context.user_data.get("update_field"))
        if fld:
            update_field(update.effective_user.id, fld, text)
            update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        else:
            update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π /update –µ—â—ë —Ä–∞–∑.")
        context.user_data.pop("update_field", None)
        return menu(update, context)

    # –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        return update_cmd(update, context)
    if text == "üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏":
        return settime(update, context)
    if text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞":
        return subscribe(update, context)
    if text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã":
        return referrals(update, context)
    if text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é":
        return close_menu(update, context)

def unknown(update: Update, context: CallbackContext):
    update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π /menu.")

def broadcast(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    text = " ".join(context.args).strip()
    if not text:
        update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    ok = 0
    for chat_id in all_chat_ids():
        try:
            context.bot.send_message(chat_id=chat_id, text=text)
            ok += 1
        except Exception:
            pass
    update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –†–∞–∑–æ—Å–ª–∞–Ω–æ: {ok}")

# ============================ –î–ï–ô–õ–ò-–î–û–°–¢–ê–í–ö–ê ============================
def send_daily_job(context: CallbackContext):
    uid = context.job.context["user_id"]
    chat_id = context.job.context["chat_id"]
    u = get_user(uid)
    if not u:
        return
    ok, reason = can_receive_today(u)
    if not ok:
        try:
            context.bot.send_message(chat_id=chat_id, text=reason)
        except Exception:
            pass
        return

    # –≥–æ—Ç–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    name = u["name"] or ""
    bdate = (u["birth_date"] or "1970-01-01").strip()
    btime = (u["birth_time"] or "12:00").strip()
    ud = UserData(
        user_id=uid,
        name=name,
        birth_datetime_iso=f"{bdate} {btime}",
        daily_time=u["daily_time"] or "09:00",
    )
    text = generate_daily_message(ud)
    try:
        context.bot.send_message(chat_id=chat_id, text=text)
    except Exception as e:
        log.warning("send_daily failed for %s: %s", uid, e)

# ============================ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ============================
def register_handlers(dp, job_queue):
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("menu", menu))
    dp.add_handler(CommandHandler("status", status))
    dp.add_handler(CommandHandler("referrals", referrals))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("settime", settime))
    dp.add_handler(CommandHandler("update", update_cmd))
    dp.add_handler(CommandHandler("broadcast", broadcast, pass_args=True))

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_router))
    dp.add_handler(MessageHandler(Filters.command, unknown))

    # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for u in all_users():
        try:
            schedule_for_user(job_queue, u)
        except Exception as e:
            log.warning("schedule user failed: %s", e)

# ============================ –ó–ê–ü–£–°–ö (WEBHOOK/POLLING) ============================
def run_bot() -> None:
    if not TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

    init_db()

    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher
    register_handlers(dp, updater.job_queue)

    if truthy(USE_WEBHOOK):
        public_url = PUBLIC_URL.rstrip("/")
        secret = WEBHOOK_SECRET
        if not public_url or not secret:
            raise RuntimeError("PUBLIC_URL/WEBHOOK_SECRET must be set for webhook mode")

        port = int(os.environ.get("PORT", "10000"))
        # –ì–õ–ê–í–ù–´–ô –§–ò–ö–°: –ø–µ—Ä–µ–¥–∞—ë–º –≤–Ω–µ—à–Ω–∏–π webhook_url –Ω–∞–ø—Ä—è–º—É—é
        updater.start_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=secret,
            webhook_url=f"{public_url}/{secret}",
        )
        log.info("Webhook started: %s/%s (listen 0.0.0.0:%s)", public_url, secret, port)
        updater.idle()
    else:
        updater.start_polling(clean=True)
        log.info("Polling started")
        updater.idle()

if __name__ == "__main__":
    run_bot()