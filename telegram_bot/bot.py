# telegram_bot/bot.py
# -*- coding: utf-8 -*-

import logging
import os
import re
from datetime import datetime
from typing import Optional

import pytz
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    ParseMode,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
from telegram_bot import database
from telegram_bot.astrology import generate_daily_message, UserData

# ---------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s | %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("bot")

# ---------------------- –ö–æ–Ω—Ñ–∏–≥/–æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
PUBLIC_URL = os.getenv("PUBLIC_URL", "").rstrip("/")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")
PORT = int(os.getenv("PORT", "10000"))

LOCAL_TZ_NAME = os.getenv("TZ", "Europe/Berlin")
LOCAL_TZ = pytz.timezone(LOCAL_TZ_NAME)

# ---------------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------------------
scheduler = BackgroundScheduler(timezone=LOCAL_TZ)

# ---------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------------------
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ["üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", "üßæ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
        ["‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å", "‚è∞ –ú–æ–π –∑–∞–ø—É—Å–∫ (/mytime)"],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)

UPDATE_MENU = ReplyKeyboardMarkup(
    [
        ["–ò–º—è", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["‚¨ÖÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)

TIME_RE = re.compile(r"^([01]?\d|2[0-3]):([0-5]\d)$")


def reply_menu(update: Update, text: str) -> None:
    update.effective_message.reply_text(text, reply_markup=MAIN_MENU)


def get_user(context: CallbackContext, update: Update) -> dict:
    tg_user = update.effective_user
    chat_id = update.effective_chat.id
    database.init_db()

    u = database.get_user(tg_user.id)
    if not u:
        database.upsert_user(
            user_id=tg_user.id,
            chat_id=chat_id,
            first_name=tg_user.first_name or "",
            tz=LOCAL_TZ_NAME,
        )
        u = database.get_user(tg_user.id)
    else:
        # –¥–µ—Ä–∂–∏–º chat_id –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
        if not u.get("chat_id") or int(u.get("chat_id")) != int(chat_id):
            database.update_user_field(tg_user.id, "chat_id", chat_id)
            u["chat_id"] = chat_id
    return u


# ---------------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É ----------------------
def _parse_date_iso(s: Optional[str]):
    if not s:
        return None
    for fmt in ("%Y-%m-%d", "%Y-%m-%dT%H:%M:%S", "%Y-%m-%d %H:%M:%S"):
        try:
            return datetime.strptime(s, fmt).date()
        except Exception:
            continue
    return None


def can_receive_today(u: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, reason) –≥–¥–µ reason ‚àà {'active','trial','bonus','expired'}.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ö–µ–º—ã –ë–î (trial_until/sub_until/subscription_until).
    """
    status = (u.get("subscription_status") or "").lower()
    trial_until_raw = (
        u.get("trial_until") or u.get("sub_until") or u.get("subscription_until")
    )
    bonus_days = int(u.get("bonus_days") or 0)

    tzname = u.get("tz") or LOCAL_TZ_NAME
    tz = pytz.timezone(tzname)
    today = datetime.now(tz).date()

    if status == "active":
        return True, "active"

    trial_until = _parse_date_iso(trial_until_raw)
    if trial_until and today <= trial_until:
        return True, "trial"

    if bonus_days > 0:
        return True, "bonus"

    return False, "expired"


# ---------------------- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ ----------------------
def schedule_or_update_daily_job(user_id: int, daily_time: str, user_tz: Optional[str]):
    tz = pytz.timezone(user_tz or LOCAL_TZ_NAME)
    job_id = f"user-{user_id}"

    # –£–¥–∞–ª–∏–º –ø—Ä–µ–∂–Ω—é—é
    for j in scheduler.get_jobs():
        if j.id == job_id:
            j.remove()

    hour, minute = map(int, daily_time.split(":"))
    scheduler.add_job(
        send_daily_job,
        trigger="cron",
        id=job_id,
        replace_existing=True,
        hour=hour,
        minute=minute,
        second=0,
        timezone=tz,
        args=[user_id],
    )
    logger.info("Scheduled %s at %02d:%02d (%s)", job_id, hour, minute, tz)


# ---------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ ----------------------
def send_daily_job(user_id: int):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑—ã–≤–∞–µ—Ç APScheduler –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    try:
        u = database.get_user(user_id)
        if not u:
            logger.warning("User %s not found in DB", user_id)
            return

        ok, reason = can_receive_today(u)
        if not ok:
            logger.info("Skip %s: reason=%s", user_id, reason)
            return

        tzname = u.get("tz") or LOCAL_TZ_NAME
        tz = pytz.timezone(tzname)

        userdata = UserData(
            name=u.get("first_name") or "",
            birth_date=u.get("birth_date") or "",
            birth_place=u.get("birth_place") or "",
            birth_time=u.get("birth_time") or "",
            tz=tzname,
        )
        text = generate_daily_message(userdata)

        chat_id = int(u["chat_id"])
        updater.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )

        # –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥—É–µ–º –±–æ–Ω—É—Å–Ω—ã–π –¥–µ–Ω—å
        if reason == "bonus":
            bd = int(u.get("bonus_days") or 0)
            if bd > 0:
                database.update_user_field(user_id, "bonus_days", bd - 1)

    except Exception:
        logger.exception("send_daily_job failed for user=%s", user_id)


# ---------------------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------------------
def start(update: Update, context: CallbackContext):
    u = get_user(context, update)
    reply_menu(update, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.")


def menu(update: Update, context: CallbackContext):
    reply_menu(update, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")


def mytime(update: Update, context: CallbackContext):
    u = get_user(context, update)
    tzname = u.get("tz") or LOCAL_TZ_NAME
    tz = pytz.timezone(tzname)
    daily = u.get("daily_time") or "–Ω–µ –∑–∞–¥–∞–Ω–æ"
    job_id = f"user-{u['user_id']}"
    jobs = [j for j in scheduler.get_jobs() if j.id == job_id]
    if jobs and jobs[0].next_run_time:
        nxt = jobs[0].next_run_time.astimezone(tz).strftime("%d.%m %H:%M %Z")
        msg = f"‚è∞ –í–∞—à–µ –≤—Ä–µ–º—è: {daily} ({tzname})\n‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {nxt}"
    else:
        msg = f"‚è∞ –í–∞—à–µ –≤—Ä–µ–º—è: {daily} ({tzname}). –ó–∞–¥–∞—á–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞."
    update.effective_message.reply_text(msg)


# --- /settime ---
def settime(update: Update, context: CallbackContext):
    update.effective_message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä. 08:30).",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data["await_time"] = True


def text_router(update: Update, context: CallbackContext):
    msg = (update.effective_message.text or "").strip()

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if context.user_data.get("await_time"):
        context.user_data["await_time"] = False
        if not TIME_RE.match(msg):
            reply_menu(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:15.")
            return

        u = get_user(context, update)
        database.update_user_field(u["user_id"], "daily_time", msg)

        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º
        schedule_or_update_daily_job(u["user_id"], msg, u.get("tz"))
        reply_menu(update, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
        return

    # –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    if msg == "üßæ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        update.effective_message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=UPDATE_MENU)
        context.user_data["await_update"] = True
        return

    if context.user_data.get("await_update"):
        if msg == "‚¨ÖÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å":
            context.user_data["await_update"] = False
            reply_menu(update, "–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ.")
            return
        elif msg == "–ò–º—è":
            update.effective_message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.", reply_markup=ReplyKeyboardRemove())
            context.user_data["await_name"] = True
            return
        elif msg == "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è":
            update.effective_message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.",
                                                reply_markup=ReplyKeyboardRemove())
            context.user_data["await_birth_date"] = True
            return
        elif msg == "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è":
            update.effective_message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞¬ª.", reply_markup=ReplyKeyboardRemove())
            context.user_data["await_birth_place"] = True
            return
        elif msg == "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è":
            update.effective_message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.",
                                                reply_markup=ReplyKeyboardRemove())
            context.user_data["await_birth_time"] = True
            return

    # –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    if context.user_data.pop("await_name", False):
        u = get_user(context, update)
        database.update_user_field(u["user_id"], "first_name", msg)
        reply_menu(update, "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        return

    if context.user_data.pop("await_birth_date", False):
        u = get_user(context, update)
        database.update_user_field(u["user_id"], "birth_date", msg)
        reply_menu(update, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")
        return

    if context.user_data.pop("await_birth_place", False):
        u = get_user(context, update)
        database.update_user_field(u["user_id"], "birth_place", msg)
        reply_menu(update, "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        return

    if context.user_data.pop("await_birth_time", False):
        if not TIME_RE.match(msg):
            reply_menu(update, "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.")
            return
        u = get_user(context, update)
        database.update_user_field(u["user_id"], "birth_time", msg)
        reply_menu(update, "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        return

    # –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if msg == "üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è":
        return settime(update, context)
    if msg in ("‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å",):
        u = get_user(context, update)
        ok, reason = can_receive_today(u)
        update.effective_message.reply_text(f"–°—Ç–∞—Ç—É—Å: {reason} (ok={ok})", reply_markup=MAIN_MENU)
        return
    if msg in ("‚è∞ –ú–æ–π –∑–∞–ø—É—Å–∫ (/mytime)",):
        return mytime(update, context)

    # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
    reply_menu(update, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:")


# ---------------------- –û—à–∏–±–∫–∏ ----------------------
def error_handler(update: object, context: CallbackContext) -> None:
    logger.exception("Unhandled exception", exc_info=context.error)


# ---------------------- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ----------------------
def main():
    database.init_db()

    global updater
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –ö–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("menu", menu))
    dp.add_handler(CommandHandler("settime", settime))
    dp.add_handler(CommandHandler("mytime", mytime))

    # –¢–µ–∫—Å—Ç/–∫–Ω–æ–ø–∫–∏
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_router))

    # –û—à–∏–±–∫–∏
    dp.add_error_handler(error_handler)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if not scheduler.running:
        scheduler.start()

    # --- WEBHOOK –Ω–∞ Render ---
    # –í–Ω—É—Ç—Ä–∏ —Å–ª—É—à–∞–µ–º –ø–æ—Ä—Ç 10000, —Å–Ω–∞—Ä—É–∂–∏ Telegram —Ö–æ–¥–∏—Ç –Ω–∞ https://PUBLIC_URL/WEBHOOK_SECRET
    updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=WEBHOOK_SECRET)
    if PUBLIC_URL:
        updater.bot.set_webhook(f"{PUBLIC_URL}/{WEBHOOK_SECRET}")
        logger.info("Webhook started: %s/%s", PUBLIC_URL, WEBHOOK_SECRET)
    else:
        logger.warning("PUBLIC_URL is empty, falling back to polling")
        updater.start_polling()

    logger.info("Scheduler started")
    logger.info("Your service is live üí´")

    updater.idle()


if __name__ == "__main__":
    main()