# -*- coding: utf-8 -*-
"""
bot.py ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å –±–æ—Ç–∞ (PTB 13.15) —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º webhook-—Ä–µ–∂–∏–º–æ–º.

–û–∫—Ä—É–∂–µ–Ω–∏–µ (Render ‚Üí Settings ‚Üí Environment):
  TELEGRAM_BOT_TOKEN   ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ revoke)
  USE_WEBHOOK          ‚Äî "1" (–≤–∫–ª—é—á–∏—Ç—å –≤–µ–±—Ö—É–∫) –∏–ª–∏ "0" (polling)
  PUBLIC_URL           ‚Äî https://<—Ç–≤–æ–π-—Å–µ—Ä–≤–∏—Å>.onrender.com  (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ USE_WEBHOOK=1)
  WEBHOOK_SECRET       ‚Äî –¥–ª–∏–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ USE_WEBHOOK=1)
  DB_PATH              ‚Äî /opt/render/project/src/user_data.db  (–µ—Å–ª–∏ –Ω–µ—Ç –¥–∏—Å–∫–∞ /data)
                          –∏–ª–∏ /data/user_data.db (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω Persistent Disk)
  TZ                   ‚Äî Europe/Berlin
  PYTHONUNBUFFERED     ‚Äî 1
"""

import os
import logging
import sqlite3
from contextlib import closing
from datetime import datetime

import pytz
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    ConversationHandler,
)

# ==== –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –±–æ—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è) ====
try:
    # —Ç–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    from .config import (
        TELEGRAM_BOT_TOKEN as CFG_TOKEN,
        PUBLIC_URL as CFG_PUBLIC_URL,
        WEBHOOK_SECRET as CFG_WEBHOOK_SECRET,
        USE_WEBHOOK as CFG_USE_WEBHOOK,
        ADMIN_IDS as CFG_ADMIN_IDS,
        DB_PATH as CFG_DB_PATH,
    )
except Exception:
    CFG_TOKEN = CFG_PUBLIC_URL = CFG_WEBHOOK_SECRET = None
    CFG_USE_WEBHOOK = None
    CFG_ADMIN_IDS = []
    CFG_DB_PATH = None

try:
    # —Ç–≤–æ–π –º–æ–¥—É–ª—å –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å
    from . import database as db
except Exception:
    db = None

# (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏; –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º)
try:
    from . import referral
except Exception:
    referral = None

try:
    from . import payments
except Exception:
    payments = None

try:
    from . import astrology
except Exception:
    astrology = None

# ============================ –õ–û–ì–ò ============================
logging.basicConfig(
    format="%(asctime)s %(levelname)s | %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

# ============================ –ö–û–ù–§–ò–ì ============================
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", CFG_TOKEN or "").strip()
USE_WEBHOOK = str(os.getenv("USE_WEBHOOK", CFG_USE_WEBHOOK if CFG_USE_WEBHOOK is not None else "1")).strip()
PUBLIC_URL = os.getenv("PUBLIC_URL", CFG_PUBLIC_URL or "").strip()
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", CFG_WEBHOOK_SECRET or "").strip()
DB_PATH = os.getenv("DB_PATH", CFG_DB_PATH or "/opt/render/project/src/user_data.db").strip()
TZ = os.getenv("TZ", "Europe/Berlin")
TZINFO = pytz.timezone(TZ)

ADMIN_IDS = set()
for raw in (os.getenv("ADMIN_IDS", "") or ",").split(","):
    raw = raw.strip()
    if raw.isdigit():
        ADMIN_IDS.add(int(raw))
for v in (CFG_ADMIN_IDS or []):
    try:
        ADMIN_IDS.add(int(v))
    except Exception:
        pass

def truthy(v) -> bool:
    return str(v).strip().lower() in {"1", "true", "yes", "y", "on"}

# ============================ –ü–†–û–°–¢–ï–ô–®–ê–Ø –ë–î (fallback, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–≤–æ–µ–≥–æ database.py) ============================
def _fallback_init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.execute("""
        CREATE TABLE IF NOT EXISTS users(
            user_id     INTEGER PRIMARY KEY,
            chat_id     INTEGER,
            name        TEXT,
            birth_date  TEXT,
            birth_place TEXT,
            birth_time  TEXT,
            daily_time  TEXT,
            created_at  TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """)
        con.execute("""
        CREATE TABLE IF NOT EXISTS referrals(
            user_id     INTEGER PRIMARY KEY,
            code        TEXT,
            invited_cnt INTEGER DEFAULT 0,
            bonus_days  INTEGER DEFAULT 0
        );
        """)
        con.commit()

def _fallback_get_user(uid: int):
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        cur = con.execute("SELECT user_id, chat_id, name, birth_date, birth_place, birth_time, daily_time FROM users WHERE user_id=?", (uid,))
        row = cur.fetchone()
        return row

def _fallback_upsert_user(uid: int, chat_id: int):
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.execute(
            "INSERT INTO users(user_id, chat_id) VALUES(?, ?) ON CONFLICT(user_id) DO UPDATE SET chat_id=excluded.chat_id",
            (uid, chat_id),
        )
        con.commit()

def _fallback_update_field(uid: int, field: str, value: str):
    if field not in {"name", "birth_date", "birth_place", "birth_time", "daily_time"}:
        return
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        con.execute(f"UPDATE users SET {field}=? WHERE user_id=?", (value, uid))
        con.commit()

def _fallback_all_chat_ids():
    with closing(sqlite3.connect(DB_PATH, check_same_thread=False)) as con:
        cur = con.execute("SELECT chat_id FROM users WHERE chat_id IS NOT NULL")
        return [r[0] for r in cur.fetchall()]

# –û–±—ë—Ä—Ç–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π database.py, –µ—Å–ª–∏ –µ—Å—Ç—å; –∏–Ω–∞—á–µ fallback
def init_db():
    try:
        if db:  # —Ç–≤–æ–π –º–æ–¥—É–ª—å
            db.init_db()
        else:
            _fallback_init_db()
        log.info("DB ready at %s", DB_PATH)
    except Exception as e:
        log.exception("DB init failed: %s", e)
        _fallback_init_db()

def ensure_user(uid: int, chat_id: int):
    try:
        if db:
            if not db.get_user(uid):
                db.create_or_update_user(uid, chat_id=chat_id)
            else:
                db.create_or_update_user(uid, chat_id=chat_id)
        else:
            _fallback_upsert_user(uid, chat_id)
    except Exception:
        _fallback_upsert_user(uid, chat_id)

def update_field(uid: int, field: str, value: str):
    try:
        if db:
            db.update_user_field(uid, field, value)
        else:
            _fallback_update_field(uid, field, value)
    except Exception:
        _fallback_update_field(uid, field, value)

def get_user(uid: int):
    try:
        if db:
            return db.get_user(uid)
        return _fallback_get_user(uid)
    except Exception:
        return _fallback_get_user(uid)

def all_chat_ids():
    try:
        if db:
            return db.get_all_chat_ids()
        return _fallback_all_chat_ids()
    except Exception:
        return _fallback_all_chat_ids()

# ============================ –ö–õ–ê–í–ò–ê–¢–£–†–´ ============================
MAIN_KB = ReplyKeyboardMarkup(
    [
        ["‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏"],
        ["üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"],
        ["‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"],
    ],
    resize_keyboard=True,
)

UPDATE_KB = ReplyKeyboardMarkup(
    [
        ["–ò–º—è", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è"],
        ["–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å"],
    ],
    resize_keyboard=True,
)

# ============================ –•–ï–ù–î–õ–ï–†–´ ============================
CHOOSING, TYPING_VALUE = range(2)

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    ensure_user(user.id, update.effective_chat.id)
    msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–¥—Ä—É–≥'}! üåü\n\n"
        "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ñ–º–∏ /menu, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, "
        "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    )
    update.message.reply_text(msg)

def menu(update: Update, context: CallbackContext):
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_KB)

def close_menu(update: Update, context: CallbackContext):
    update.message.reply_text("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=ReplyKeyboardRemove())

def status(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    u = get_user(uid)
    # –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å
    when = None
    if u:
        # –∏–Ω–¥–µ–∫—Å—ã –≤ fallback-–µ: (user_id, chat_id, name, birth_date, birth_place, birth_time, daily_time)
        when = u[6] if len(u) >= 7 else None
    txt = ["–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –¥–µ–º–æ (–±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞)"]
    if when:
        txt.append(f"–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {when}")
    update.message.reply_text("\n".join(txt))

def referrals(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    bot_username = context.bot.username or "bot"
    code = str(uid)
    link = f"https://t.me/{bot_username}?start={code}"
    invited = 0
    bonus_days = 0
    if referral:
        try:
            s = referral.get_stats(uid)
            invited = s.get("invited", 0)
            bonus_days = s.get("bonus_days", 0)
        except Exception:
            pass
    text = (
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: {invited}\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏: {bonus_days}"
    )
    update.message.reply_text(text, disable_web_page_preview=True)

def subscribe(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü–ª–∞—Ç—ë–∂–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ø–æ–∑–∂–µ. –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º.\n"
        "–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–ø–æ–º–Ω–∏ –∫–æ–º–∞–Ω–¥–æ–π /subscribe.",
    )

def settime(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):", reply_markup=ReplyKeyboardRemove()
    )
    context.user_data["await_time"] = True

def text_router(update: Update, context: CallbackContext):
    text = (update.message.text or "").strip()

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    if context.user_data.pop("await_time", False):
        try:
            hh, mm = text.split(":")
            hh, mm = int(hh), int(mm)
            assert 0 <= hh < 24 and 0 <= mm < 60
        except Exception:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 08:30. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /settime.")
            return
        update_field(update.effective_user.id, "daily_time", f"{hh:02d}:{mm:02d}")
        update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return

    # –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if text in {"–ò–º—è", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è"}:
        context.user_data["update_field"] = text
        update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        context.user_data["await_value"] = True
        return

    if text == "–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å":
        update.message.reply_text("–û–∫, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.", reply_markup=MAIN_KB)
        context.user_data.pop("update_field", None)
        context.user_data.pop("await_value", None)
        return

    # –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    if context.user_data.pop("await_value", False):
        fld_map = {
            "–ò–º—è": "name",
            "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": "birth_date",
            "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è": "birth_place",
            "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è": "birth_time",
        }
        fld = fld_map.get(context.user_data.get("update_field"))
        if fld:
            update_field(update.effective_user.id, fld, text)
            update.message.reply_text("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=MAIN_KB)
        else:
            update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π /update –µ—â—ë —Ä–∞–∑.", reply_markup=MAIN_KB)
        context.user_data.pop("update_field", None)
        return

    # –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é
    if text in {"‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}:
        return update_cmd(update, context)
    if text in {"üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏"}:
        return settime(update, context)
    if text in {"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"}:
        return subscribe(update, context)
    if text in {"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"}:
        return referrals(update, context)
    if text in {"‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"}:
        return close_menu(update, context)

def update_cmd(update: Update, context: CallbackContext):
    update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=UPDATE_KB)

def unknown(update: Update, context: CallbackContext):
    update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π /menu.")

def broadcast(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in ADMIN_IDS:
        update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    text = " ".join(context.args).strip()
    if not text:
        update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    ok = 0
    for chat_id in all_chat_ids():
        try:
            context.bot.send_message(chat_id=chat_id, text=text)
            ok += 1
        except Exception:
            pass
    update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –†–∞–∑–æ—Å–ª–∞–Ω–æ: {ok}")

# ============================ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ============================
def register_handlers(dp):
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("menu", menu))
    dp.add_handler(CommandHandler("status", status))
    dp.add_handler(CommandHandler("referrals", referrals))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("settime", settime))
    dp.add_handler(CommandHandler("update", update_cmd))
    dp.add_handler(CommandHandler("broadcast", broadcast, pass_args=True))

    # –æ–±—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä (–∫–Ω–æ–ø–∫–∏ –∏ –≤–≤–æ–¥)
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_router))
    dp.add_handler(MessageHandler(Filters.command, unknown))

# ============================ –ó–ê–ü–£–°–ö (WEBHOOK/POLLING) ============================
def run_bot() -> None:
    if not TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

    # –ì–æ—Ç–æ–≤–∏–º –ë–î
    init_db()

    # Updater + handlers
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher
    register_handlers(dp)

    if truthy(USE_WEBHOOK):
        public_url = PUBLIC_URL.rstrip("/")
        secret = WEBHOOK_SECRET
        if not public_url or not secret:
            raise RuntimeError("PUBLIC_URL/WEBHOOK_SECRET must be set for webhook mode")

        port = int(os.environ.get("PORT", "10000"))

        # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º –≤–Ω–µ—à–Ω–∏–π webhook_url, —á—Ç–æ–±—ã Telegram –≤–∏–¥–µ–ª –ø–æ—Ä—Ç 80/443 –Ω–∞ Render,
        # –∞ –Ω–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π $PORT. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ù–ò–ß–ï–ì–û –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º (–Ω–∏–∫–∞–∫–æ–≥–æ bot.set_webhook).
        updater.start_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=secret,
            webhook_url=f"{public_url}/{secret}",
        )
        log.info("Webhook started: %s/%s (listen 0.0.0.0:%s)", public_url, secret, port)
        updater.idle()
    else:
        updater.start_polling(clean=True)
        log.info("Polling started")
        updater.idle()

if __name__ == "__main__":
    run_bot()
