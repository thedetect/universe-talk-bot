import os
import random
import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)
import gspread
from google.oauth2.service_account import Credentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SHEET_NAME = "Sheet1"
GSCOPE = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
ASK_NAME, ASK_BIRTHDATE, ASK_BIRTHTIME, ASK_BIRTHPLACE, ASK_TIME, CONFIRM = range(6)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
def get_gsheets_client():
    creds = Credentials.from_service_account_info(eval(os.getenv("GOOGLE_CREDS")), scopes=GSCOPE)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SPREADSHEET_ID)
    worksheet = sh.worksheet(SHEET_NAME)
    return worksheet

def save_user_to_gsheet(user_data):
    ws = get_gsheets_client()
    user_id = str(user_data.get("user_id"))
    existing = ws.col_values(1)
    new_row = [
        user_id, user_data.get("name"), user_data.get("birthdate"),
        user_data.get("birthtime"), user_data.get("birthplace"),
        user_data.get("reg_date"), "", "", "", "", "", "", "",
        user_data.get("send_time", "10:05")
    ]
    if user_id in existing:
        idx = existing.index(user_id) + 1
        ws.update(f"A{idx}:N{idx}", [new_row])
    else:
        ws.append_row(new_row, value_input_option="USER_ENTERED")

# === –¶–∏—Ç–∞—Ç—ã –∏ —Ä–∏—Ç—É–∞–ª—ã ===
def get_random_quote():
    try:
        with open("quotes.txt", encoding="utf-8") as f:
            quotes = [q.strip() for q in f if q.strip()]
        return random.choice(quotes)
    except:
        return "–¢—ã —É–∂–µ –≤—Å—ë –º–æ–∂–µ—à—å. –í—Å–µ–ª–µ–Ω–Ω–∞—è –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è."

def get_random_ritual():
    try:
        with open("morning_rituals.txt", encoding="utf-8") as f:
            rituals = [r.strip() for r in f if r.strip()]
        return random.choice(rituals)
    except:
        return "–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞ –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π: —Ç—ã –∂–∏–≤—ë—à—å –≤ –ø–æ—Ç–æ–∫–µ."

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å–ª–∞–Ω–∏—è ===
def get_daily_message(user_data):
    name = user_data.get("name", "–¥—Ä—É–≥")
    themes = ["–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç—É–∏—Ü–∏—è", "–î–æ–≤–µ—Ä–∏–µ –∫ —Å–µ–±–µ", "–ü–æ–∫–æ–π –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ"]
    luna = ["–õ—É–Ω–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç —Ç–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é.", "–°–µ–≥–æ–¥–Ω—è –õ—É–Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –º—É–¥—Ä–∞."]
    mars = ["–ú–∞—Ä—Å –ø—Ä–∏–¥–∞—ë—Ç —Ä–µ—à–∏–º–æ—Å—Ç–∏.", "–≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å."]
    venus = ["–í–µ–Ω–µ—Ä–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ª—é–±–æ–≤—å –∏ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ.", "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞."]

    do = list(set(random.sample([
        "–°–¥–µ–ª–∞–π –ø–∞—É–∑—É –∏ –ø—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ.",
        "–ó–∞–ø–∏—à–∏ —Ç–æ, –∑–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω.",
        "–°–¥–µ–ª–∞–π —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –º–µ—á—Ç–µ."
    ], 2)))

    no = list(set(random.sample([
        "–ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç—Ä–µ–≤–æ–≥—É ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª.",
        "–ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.",
        "–ù–µ –∫—Ä–∏—Ç–∏–∫—É–π —Å–µ–±—è."
    ], 2)))

    return (
        f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!

"
        f"*üîÆ –¢–µ–º–∞ –¥–Ω—è:* {random.choice(themes)}

"
        f"üåô {random.choice(luna)}
"
        f"üî• {random.choice(mars)}
"
        f"üå∏ {random.choice(venus)}

"
        f"*‚úÖ –î–µ–π—Å—Ç–≤—É–π:*
‚Ä¢ {do[0]}
‚Ä¢ {do[1]}

"
        f"*‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏:*
‚Ä¢ {no[0]}
‚Ä¢ {no[1]}

"
        f"*üïØ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (5 –º–∏–Ω—É—Ç):*
{get_random_ritual()}

"
        f"*‚ú® –î–µ–≤–∏–∑ –¥–Ω—è:*
¬´{get_random_quote()}¬ª"
    )

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True))
    return ASK_NAME

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /start.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 27.11.1997):")
    return ASK_BIRTHDATE

async def ask_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birthdate"] = update.message.text
    await update.message.reply_text("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:25):")
    return ASK_BIRTHTIME

async def ask_birthtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birthtime"] = update.message.text
    await update.message.reply_text("–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥):")
    return ASK_BIRTHPLACE

async def ask_birthplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birthplace"] = update.message.text
    await update.message.reply_text("üåÖ –£—Ç—Ä–æ ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –∏ —è—Å–Ω–æ—Å—Ç–∏.
–í–æ —Å–∫–æ–ª—å–∫–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–æ–∏—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –∫ —Ç–µ–±–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:05)")
    return ASK_TIME

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["send_time"] = update.message.text
    context.user_data["reg_date"] = datetime.now().strftime("%d.%m.%Y %H:%M")
    context.user_data["user_id"] = update.effective_user.id
    await update.message.reply_text("‚ú® –í—Å–µ–ª–µ–Ω–Ω–∞—è —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è...")
    try:
        save_user_to_gsheet(context.user_data)
        msg = get_daily_message(context.user_data)
        await update.message.reply_text(msg, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        logging.error(e)
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthdate)],
            ASK_BIRTHTIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthtime)],
            ASK_BIRTHPLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthplace)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()