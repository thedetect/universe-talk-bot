import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from datetime import datetime
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials

# === Load .env ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# === Logging ===
logging.basicConfig(level=logging.INFO)

# === Google Sheets Setup ===
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
creds = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
client = gspread.authorize(creds)
sheet = client.open_by_key(os.getenv("SPREADSHEET_ID")).sheet1

# === States ===
NAME, DATE, TIME, CITY = range(4)

# === Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    context.user_data.clear()
    await update.message.reply_text("üåÖ –£—Ç—Ä–æ ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è —Å–∏–ª—ã –∏ —è—Å–Ω–æ—Å—Ç–∏\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–ö–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 27.11.1997)")
    return DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth_date"] = update.message.text.strip()
    await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ä–æ–¥–∏–ª—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:25)")
    return TIME

async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth_time"] = update.message.text.strip()
    await update.message.reply_text("–ì–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è?")
    return CITY

async def save_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth_city"] = update.message.text.strip()
    data = context.user_data
    user_id = update.effective_user.id

    row = [str(user_id), data["name"], data["birth_date"], data["birth_time"], data["birth_city"], datetime.now().isoformat()]
    sheet.append_row(row)
    await update.message.reply_text("‚ú® –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ü–æ–ª—É—á–∏ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π.")
    await send_message(update, context)
    return ConversationHandler.END

# === –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è ===
async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_rows = sheet.get_all_records()
    user_info = next((r for r in user_rows if str(r['id']) == user_id), None)

    if not user_info:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start.")
        return

    name = user_info['name']
    theme = "–ì–∞—Ä–º–æ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ"
    astro = [
        "üåô –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω.",
        "üî• –ú–∞—Ä—Å –¥–∞—ë—Ç —Ç–µ–±–µ —Å–∏–ª—É –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ—Ç¬ª.",
        "üå∏ –í–µ–Ω–µ—Ä–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—é."
    ]
    actions = [
        "‚úÖ –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∂–µ–ª–∞–Ω–∏—è.",
        "‚úÖ –ü—Ä–æ–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π."
    ]
    donts = ["‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç—Ä–µ–≤–æ–≥—É."]

    ritual = get_random_ritual()

    message = (
        f"‚ú® –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!\n\n"
        f"üîÆ *–¢–µ–º–∞ –¥–Ω—è*: ¬´{theme}¬ª\n"
        f"–ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ.\n\n"
        + "\n".join(astro) + "\n\n"
        + "*–î–µ–π—Å—Ç–≤—É–π:*\n" + "\n".join(actions) + "\n\n"
        + "*–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏:*\n" + "\n".join(set(donts)) + "\n\n"
        + f"üïØÔ∏è *–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (5 –º–∏–Ω—É—Ç)*:\n{ritual}\n\n"
        + "üí¨ *–î–µ–≤–∏–∑ –¥–Ω—è*: ¬´–¢—ã –º–∞–≥–Ω–∏—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ.¬ª"
    )

    await update.message.reply_markdown(message)

# === –£—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–∏—Ç—É–∞–ª—ã ===
def get_random_ritual():
    try:
        with open("morning_rituals.txt", "r", encoding="utf-8") as file:
            import random
            rituals = [r.strip() for r in file if r.strip()]
            return random.choice(rituals)
    except:
        return "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Å–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö."

# === –ú–µ–Ω—é ===
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    rows = sheet.get_all_records()
    row = next((r for r in rows if str(r['id']) == user_id), None)

    if row:
        text = (
            f"üë§ *–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ*\n"
            f"–ò–º—è ‚Äî {row['name']}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî {row['birth_date']}\n"
            f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî {row['birth_time']}\n"
            f"–ì–æ—Ä–æ–¥ ‚Äî {row['birth_city']}\n\n"
            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø–∏—à–∏ /start"
        )
    else:
        text = "–¢—ã –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏ /start."
    await update.message.reply_markdown(text)

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_city)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_user)],
        },
        fallbacks=[]
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("menu", menu))
    app.run_polling()

if __name__ == "__main__":
    main()