import os
import random
import logging
from datetime import datetime, timedelta
import pytz

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)

import gspread
from google.oauth2.service_account import Credentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
SHEET_NAME = "Sheet1"

GSCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

logging.basicConfig(level=logging.INFO)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
ASK_NAME, ASK_BIRTHDATE, ASK_BIRTHTIME, ASK_BIRTHPLACE, ASK_TIME, CONFIRM = range(6)

# === GSheets ===
def get_gsheets_client():
    creds_json = os.getenv("GOOGLE_CREDS")
    creds = Credentials.from_service_account_info(eval(creds_json), scopes=GSCOPE)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SPREADSHEET_ID)
    return sh.worksheet(SHEET_NAME)

def save_user_to_gsheet(user_data):
    ws = get_gsheets_client()
    row = [
        user_data.get("user_id"),
        user_data.get("name"),
        user_data.get("birthdate"),
        user_data.get("birthtime"),
        user_data.get("birthplace"),
        user_data.get("reg_date"),
        "", "", "", "", "", "", "",
        user_data.get("send_time")
    ]
    ws.append_row(row, value_input_option="USER_ENTERED")

# === –¶–∏—Ç–∞—Ç—ã ===
def get_random_quote():
    try:
        with open("quotes.txt", encoding="utf-8") as f:
            quotes = [line.strip() for line in f if line.strip()]
        return random.choice(quotes) if quotes else ""
    except:
        return "–°–µ–≥–æ–¥–Ω—è ‚Äî –ª—É—á—à–∏–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞ –Ω–∞ —Å–µ–±—è!"

# === –ü—Ä–æ–≥–Ω–æ–∑ ===
THEMES = ["–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç—É–∏—Ü–∏—è", "–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥", "–ì–∞—Ä–º–æ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ", "–≠–Ω–µ—Ä–≥–∏—è –ø–µ—Ä–µ–º–µ–Ω", "–î–æ–≤–µ—Ä–∏–µ –∫ –í—Å–µ–ª–µ–Ω–Ω–æ–π"]
LUNA = ["–õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é.", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω.", "–í–∞–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É."]
MARS = ["–ú–∞—Ä—Å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.", "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–∞.", "–ú–∞—Ä—Å –¥–∞—ë—Ç —Ç–µ–±–µ —Å–∏–ª—É –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ—Ç¬ª."]
VENUS = ["–í–µ–Ω–µ—Ä–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫—É.", "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–µ–Ω—å –¥–ª—è –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.", "–í–µ–Ω–µ—Ä–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—é."]
DO = ["–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∂–µ–ª–∞–Ω–∏—è.", "–°–¥–µ–ª–∞–π —à–∞–≥ –∫ –º–µ—á—Ç–µ.", "–ü—Ä–æ–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π."]
DONT = ["–ù–µ –ø—Ä–∏–Ω–∏–º–∞–π –ø–æ—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.", "–ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç—Ä–µ–≤–æ–≥—É.", "–ò–∑–±–µ–≥–∞–π —Å–∞–º–æ–µ–¥—Å—Ç–≤–∞."]
RITUAL = [
    "–ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞, —Å–¥–µ–ª–∞–π —Ç—Ä–∏ –≤–¥–æ—Ö–∞ –∏ —Å–∫–∞–∂–∏: ¬´–Ø –¥–æ–≤–µ—Ä—è—é –í—Å–µ–ª–µ–Ω–Ω–æ–π¬ª.",
    "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –Ω–µ–±–æ –∏ –≤—Å–ø–æ–º–Ω–∏ —Ç—Ä–∏ —Å–≤–æ–∏—Ö –º–µ—á—Ç—ã.",
    "–°–¥–µ–ª–∞–π —É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞—Ä—è–¥–∫—É –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å, –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–ª–æ."
]

def get_daily(user_data):
    name = user_data.get("name", "–¥—Ä—É–≥")
    return (
        f"üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {name}!*\n\n"
        f"üîÆ *–¢–µ–º–∞ –¥–Ω—è:* ¬´{random.choice(THEMES)}¬ª\n"
        f"{random.choice(['–ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ.', '–ù–µ –±–æ–π—Å—è –∏–¥—Ç–∏ –≤–ø–µ—Ä—ë–¥.'])}\n\n"
        f"üåô {random.choice(LUNA)}\n"
        f"üî• {random.choice(MARS)}\n"
        f"üå∏ {random.choice(VENUS)}\n\n"
        f"*‚úÖ –î–µ–π—Å—Ç–≤—É–π:*\n‚Ä¢ {random.choice(DO)}\n‚Ä¢ {random.choice(DO)}\n\n"
        f"*‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏:*\n‚Ä¢ {random.choice(DONT)}\n‚Ä¢ {random.choice(DONT)}\n\n"
        f"*üïØÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª (5 –º–∏–Ω—É—Ç):*\n{random.choice(RITUAL)}\n\n"
        f"*üí¨ –î–µ–≤–∏–∑ –¥–Ω—è:*\n_{get_random_quote()}_"
    )

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ –í—Å–µ–ª–µ–Ω–Ω—É—é ‚ú®\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return ASK_NAME

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏ /start.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 27.11.1997):")
    return ASK_BIRTHDATE

async def ask_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["birthdate"] = update.message.text
    await update.message.reply_text("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:25):")
    return ASK_BIRTHTIME

async def ask_birthtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["birthtime"] = update.message.text
    await update.message.reply_text("–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞):")
    return ASK_BIRTHPLACE

async def ask_birthplace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["birthplace"] = update.message.text
    await update.message.reply_text(
        "‚è∞ *–£—Ç—Ä–æ ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –∏ —è—Å–Ω–æ—Å—Ç–∏.*\n\n"
        "–í–æ —Å–∫–æ–ª—å–∫–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–æ–∏—Ç –∑–∞–≥–ª—è–Ω—É—Ç—å –∫ —Ç–µ–±–µ?\n\n_–ü—Ä–∏–º–µ—Ä: 10:05_",
        parse_mode='Markdown'
    )
    return ASK_TIME

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["send_time"] = text
    context.user_data["user_id"] = update.effective_user.id
    context.user_data["reg_date"] = datetime.now().strftime("%d.%m.%Y %H:%M")
    await update.message.reply_text(
        "‚ú® –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ü–æ–ª—É—á–∏ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç –í—Å–µ–ª–µ–Ω–Ω–æ–π:",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π")]], resize_keyboard=True)
    )
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π":
        return await cancel(update, context)
    try:
        save_user_to_gsheet(context.user_data)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    daily = get_daily(context.user_data)
    await update.message.reply_text(
        daily,
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthdate)],
            ASK_BIRTHTIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthtime)],
            ASK_BIRTHPLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_birthplace)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()